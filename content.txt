Python (programming language) - Wikipedia Main menu Main menu move to sidebar hide Navigation Contribute Languages Language links are at the top of the page across from the title. Personal tools Pages for logged out editors Contents move to sidebar hide Toggle Syntax and semantics subsection Toggle Implementations subsection Toggle References subsection Toggle the table of contents Toggle the table of contents Python (programming language) 106 languages English Tools Tools move to sidebar hide Actions General Print/export In other projects From Wikipedia, the free encyclopedia This article's . Please consider expanding the lead to of all important aspects of the article. ( March 2023 ) General-purpose programming language Python : , ( ), , , First appeared 20 February 1991 ; 32 years ago ( 1991-02-20 ) 3.11.3 / 5 April 2023 ; 16 days ago ( 5 April 2023 ) 3.12.0a7 / 5 April 2023 ; 16 days ago ( 5 April 2023 ) , , ; (since 3.5, but ignored in ) , , , and more .py, .pyi, .pyc, .pyd, .pyw, .pyz (since 3.5), .pyo (prior to 3.5) Website Major , , , , , , , , Influenced by , , , , , , , , , , , , , Influenced , , , , , , , , , , , , , , at Wikibooks is a , . Its design philosophy emphasizes with the use of significant indentation via the . Python is and . It supports multiple , including (particularly ), and . It is often described as a "batteries included" language due to its comprehensive . began working on Python in the late 1980s as a successor to the and first released it in 1991 as Python 0.9.0. Python 2.0 was released in 2000. Python 3.0, released in 2008, was a major revision not completely with earlier versions. Python 2.7.18, released in 2020, was the last release of Python 2. Python consistently ranks as one of the most popular programming languages. History The designer of Python, , at 2006 Main article: Python was conceived in the late 1980s by at (CWI) in the as a successor to the , which was inspired by , capable of and interfacing with the operating system. Its implementation began in December 1989. Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his "permanent vacation" from his responsibilities as Python's " ", a title the Python community bestowed upon him to reflect his long-term commitment as the project's chief decision-maker. In January 2019, active Python core developers elected a five-member Steering Council to lead the project. Python 2.0 was released on 16 October 2000, with many major new features such as , garbage collection, , and support. Python 3.0, released on 3 December 2008, with many of its major features to Python 2.6.x and 2.7.x. Releases of Python 3 include the 2to3 utility, which automates the translation of Python 2 code to Python 3. Python 2.7's was initially set for 2015, then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3. No further security patches or other improvements will be released for it. Currently only 3.7 and later are supported. In 2021, Python 3.9.2 and 3.8.8 were expedited as all versions of Python (including 2.7 ) had security issues leading to possible and . In 2022, Python 3.10.4 and 3.9.12 were expedited and 3.8.13, and 3.7.13, because of many security issues. When Python 3.9.13 was released in May 2022, it was announced that the 3.9 series (joining the older series 3.8 and 3.7) would only receive security fixes in the future. On September 7, 2022, four new releases were made due to a potential : 3.10.7, 3.9.14, 3.8.14, and 3.7.14. As of November 2022, Python 3.11 is the stable release. Notable changes from 3.10 include increased program execution speed and improved error reporting. Design philosophy and features Python is a . and are fully supported, and many of their features support functional programming and (including and ). Many other paradigms are supported via extensions, including and . Python uses and a combination of and a cycle-detecting garbage collector for . It uses dynamic ( ), which binds method and variable names during program execution. Its design offers some support for functional programming in the tradition. It has filter , map and reduce functions; , , sets, and expressions. The standard library has two modules ( itertools and functools ) that implement functional tools borrowed from and . Its core philosophy is summarized in the document The ( PEP 20 ), which includes such as: Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Readability counts. Rather than building all of its functionality into its core, Python was designed to be highly via modules. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum's vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with , which espoused the opposite approach. Python strives for a simpler, less-cluttered syntax and grammar while giving developers a choice in their coding methodology. In contrast to 's " " motto, Python embraces a "there should be one—and preferably only one—obvious way to do it"  philosophy. , a at the and Python book author, wrote: "To describe something as 'clever' is not considered a compliment in the Python culture." Python's developers strive to avoid and reject patches to non-critical parts of the reference implementation that would offer marginal increases in speed at the cost of clarity. When speed is important, a Python programmer can move time-critical functions to extension modules written in languages such as C; or use , a . is also available, which translates a Python script into C and makes direct C-level API calls into the Python interpreter. Python's developers aim for it to be fun to use. This is reflected in its name—a tribute to the British comedy group —and in occasionally playful approaches to tutorials and reference materials, such as the use of the terms "spam" and "eggs" (a reference to ) in examples, instead of the often-used . A common in the Python community is pythonic , which has a wide range of meanings related to program style. "Pythonic" code may use Python idioms well, be natural or show fluency in the language, or conform with Python's minimalist philosophy and emphasis on readability. Code that is difficult to understand or reads like a rough transcription from another programming language is called unpythonic . Syntax and semantics Main article: Python is meant to be an easily readable language. Its formatting is visually uncluttered and often uses English keywords where other languages use punctuation. Unlike many other languages, it does not use to delimit blocks, and semicolons after statements are allowed but rarely used. It has fewer syntactic exceptions and special cases than or . Indentation Main article: Python uses indentation, rather than or keywords, to delimit . An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block. Thus, the program's visual structure accurately represents its semantic structure. This feature is sometimes termed the . Some other languages use indentation this way; but in most, indentation has no semantic meaning. The recommended indent size is four spaces. Statements and control flow Python's include: The statement, using a single equals sign = The statement, which conditionally executes a block of code, along with else and elif (a contraction of else-if) The statement, which iterates over an iterable object, capturing each element to a local variable for use by the attached block The statement, which executes a block of code as long as its condition is true The statement, which allows exceptions raised in its attached code block to be caught and handled by except clauses (or new syntax except* in Python 3.11 for exception groups ); it also ensures that clean-up code in a finally block is always run regardless of how the block exits The raise statement, used to raise a specified exception or re-raise a caught exception The class statement, which executes a block of code and attaches its local namespace to a , for use in object-oriented programming The def statement, which defines a or The statement, which encloses a code block within a context manager (for example, acquiring a before it is run, then releasing the lock; or opening and closing a ), allowing (RAII)-like behavior and replacing a common try/finally idiom The statement, which exits a loop The continue statement, which skips the rest of the current iteration and continues with the next The del statement, which removes a variable—deleting the reference from the name to the value, and producing an error if the variable is referred to before it is redefined The pass statement, serving as a , syntactically needed to create an empty code block The statement, used in debugging to check for conditions that should apply The yield statement, which returns a value from a function (and also an operator); used to implement The return statement, used to return a value from a function The and from statements, used to import modules whose functions or variables can be used in the current program The assignment statement ( = ) binds a name as a to a separate, dynamically allocated . Variables may subsequently be rebound at any time to any object. In Python, a variable name is a generic reference holder without a fixed ; however, it always refers to some object with a type. This is called —in contrast to languages, where each variable may contain only a value of a certain type. Python does not support optimization or , and, according to Van Rossum, it never will. However, better support for -like functionality is provided by extending Python's . Before 2.5, generators were ; data was passed unidirectionally out of the generator. From Python 2.5 on, it is possible to pass data back into a generator function; and from version 3.3, it can be passed through multiple stack levels. Expressions Python's include: The + , - , and * operators for mathematical addition, subtraction, and multiplication are similar to other languages, but the behavior of division differs. There are two types of divisions in Python: (or integer division) // and floating-point / division. Python uses the ** operator for exponentiation. Python uses the + operator for string concatenation. Python uses the * operator for duplicating a string a specified number of times. The @ infix operator. It is intended to be used by libraries such as for . The syntax := , called the "walrus operator", was introduced in Python 3.8. It assigns values to variables as part of a larger expression. In Python, == compares by value. Python's is operator may be used to compare object identities (comparison by reference), and comparisons may be chained—for example, a <= b <= c . Python uses and , or , and not as boolean operators. Python has a type of expression called a , as well as a more general expression called a expression . are implemented using ; however, there may be only one expression in each body. Conditional expressions are written as x if c else y (different in order of operands from the operator common to many other languages). Python makes a distinction between and . Lists are written as [ 1 , 2 , 3 ] , are mutable, and cannot be used as the keys of dictionaries (dictionary keys must be in Python). Tuples, written as ( 1 , 2 , 3 ) , are immutable and thus can be used as keys of dictionaries, provided all of the tuple's elements are immutable. The + operator can be used to concatenate two tuples, which does not directly modify their contents, but produces a new tuple containing the elements of both. Thus, given the variable t initially equal to ( 1 , 2 , 3 ) , executing t = t + ( 4 , 5 ) first evaluates t + ( 4 , 5 ) , which yields ( 1 , 2 , 3 , 4 , 5 ) , which is then assigned back to t —thereby effectively "modifying the contents" of t while conforming to the immutable nature of tuple objects. Parentheses are optional for tuples in unambiguous contexts. Python features sequence unpacking where multiple expressions, each evaluating to anything that can be assigned (to a variable, writable property, etc.) are associated in an identical manner to that forming tuple literals—and, as a whole, are put on the left-hand side of the equal sign in an assignment statement. The statement expects an iterable object on the right-hand side of the equal sign that produces the same number of values as the provided writable expressions; when iterated through them, it assigns each of the produced values to the corresponding expression on the left. Python has a "string format" operator % that functions analogously to format strings in C—e.g. "spam= %s eggs= %d " % ( "blah" , 2 ) evaluates to "spam=blah eggs=2" . In Python 2.6+ and 3+, this was supplemented by the format() method of the str class, e.g. "spam= {0} eggs= {1} " . format ( "blah" , 2 ) . Python 3.6 added "f-strings": spam = "blah" ; eggs = 2 ; f 'spam= { spam } eggs= { eggs } ' . Strings in Python can be by "adding" them (with the same operator as for adding integers and floats), e.g. "spam" + "eggs" returns "spameggs" . If strings contain numbers, they are added as strings rather than integers, e.g. "2" + "2" returns "22" . Python has various : Delimited by single or double quote marks; unlike in , , and Perl-influenced languages, single and double quote marks work the same. Both use the backslash ( \ ) as an . became available in Python 3.6 as "formatted string literals". Triple-quoted (beginning and ending with three single or double quote marks), which may span multiple lines and function like in shells, Perl, and . varieties, denoted by prefixing the string literal with r . Escape sequences are not interpreted; hence raw strings are useful where literal backslashes are common, such as and -style paths. (Compare " @ -quoting" in .) Python has and expressions in lists, denoted as a[key] , a [ start : stop ] or a [ start : stop : step ] . Indexes are , and negative indexes are relative to the end. Slices take elements from the start index up to, but not including, the stop index. The third slice parameter called step or stride , allows elements to be skipped and reversed. Slice indexes may be omitted—for example, a [:] returns a copy of the entire list. Each element of a slice is a . In Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as , , or . This leads to duplicating some functionality. For example: vs. for -loops expressions vs. if blocks The eval() vs. exec() built-in functions (in Python 2, exec is a statement); the former is for expressions, the latter is for statements Statements cannot be a part of an expression—so list and other comprehensions or , all being expressions, cannot contain statements. A particular case is that an assignment statement such as a = 1 cannot form part of the conditional expression of a conditional statement. This has the advantage of avoiding a classic C error of mistaking an assignment operator = for an equality operator == in conditions: if ( c = 1 ) { ... } is syntactically valid (but probably unintended) C code, but if c = 1 : ... causes a syntax error in Python. Methods on objects are attached to the object's class; the syntax instance . method ( argument ) is, for normal methods and functions, for Class . method ( instance , argument ) . Python methods have an explicit parameter to access , in contrast to the implicit self (or this ) in some other object-oriented programming languages (e.g., , Java, , ). Python also provides methods, often called dunder methods (due to their names beginning and ending with double-underscores), to allow user-defined classes to modify how they are handled by native operations including length, comparison, in and type conversion. Typing The standard type hierarchy in Python 3 Python uses and has typed objects but untyped variable names. Type constraints are not checked at ; rather, operations on an object may fail, signifying that it is not of a suitable type. Despite being , Python is , forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them. Python allows programmers to define their own types using , most often used for . New of classes are constructed by calling the class (for example, SpamClass () or EggsClass () ), and the classes are instances of the type (itself an instance of itself), allowing metaprogramming and . Before version 3.0, Python had two kinds of classes (both using the same syntax): old-style and new-style , current Python versions only support the semantics new style. Python supports . Python's syntax allows specifying static types, but they are not checked in the default implementation, . An experimental optional static type-checker, mypy , supports compile-time type checking. Summary of Python 3's built-in types Type Description Syntax examples bool immutable True False bytearray mutable Sequence of bytearray ( b 'Some ASCII' ) bytearray ( b "Some ASCII" ) bytearray ([ 119 , 105 , 107 , 105 ]) bytes immutable Sequence of bytes b 'Some ASCII' b "Some ASCII" bytes ([ 119 , 105 , 107 , 105 ]) complex immutable with real and imaginary parts 3 + 2.7 j 3 + 2.7 j dict mutable (or dictionary) of key and value pairs; can contain mixed types (keys and values), keys must be a hashable type { 'key1' : 1.0 , 3 : False } { } types.EllipsisType immutable An placeholder to be used as an index in arrays ... Ellipsis float immutable . The precision is machine-dependent but in practice is generally implemented as a 64-bit number with 53 bits of precision. 1.33333 frozenset immutable Unordered , contains no duplicates; can contain mixed types, if hashable frozenset ([ 4.0 , 'string' , True ]) int immutable of unlimited magnitude 42 list mutable , can contain mixed types [ 4.0 , 'string' , True ] [] types.NoneType immutable An object representing the absence of a value, often called in other languages None types.NotImplementedType immutable A placeholder that can be returned from to indicate unsupported operand types. NotImplemented range immutable An immutable sequence of numbers commonly used for looping a specific number of times in for loops range ( - 1 , 10 ) range ( 10 , - 5 , - 2 ) set mutable Unordered , contains no duplicates; can contain mixed types, if hashable { 4.0 , 'string' , True } set () str immutable A : sequence of Unicode codepoints 'Wikipedia' "Wikipedia" """Spanning multiple lines""" Spanning multiple lines tuple immutable Can contain mixed types ( 4.0 , 'string' , True ) ( 'single element' ,) () Arithmetic operations Python has the usual symbols for arithmetic operators ( + , - , * , / ), the floor division operator // and the % (where the remainder can be negative,  e.g. 4 % -3 == -2 ). It also has ** for , e.g. 5**3 == 125 and 9**0.5 == 3.0 , and a matrix‑multiplication operator @ . These operators work like in traditional math; with the same , the operators ( + and - can also be to represent positive and negative numbers respectively). The division between integers produces floating-point results. The behavior of division has changed significantly over time: Current Python (i.e. since 3.0) changed / to always be floating-point division, e.g. 5 / 2 == 2.5 . The floor division // operator was introduced. So 7//3 == 2 , -7//3 == -3 , 7.5//3 == 2.0 and -7.5//3 == -3.0 . Adding from __future__ import division causes a module used in Python 2.7 to use Python 3.0 rules for division (see above). In Python terms, / is true division (or simply division ), and // is floor division. / before version 3.0 is classic division . Rounding towards negative infinity, though different from most languages, adds consistency. For instance, it means that the equation ( a + b ) // b == a // b + 1 is always true. It also means that the equation b * ( a // b ) + a % b == a is valid for both positive and negative values of a . However, maintaining the validity of this equation means that while the result of a%b is, as expected, in the [0, b ), where b is a positive integer, it has to lie in the interval ( b , 0] when b is negative. Python provides a round function for a float to the nearest integer. For , Python 3 uses : round(1.5) and round(2.5) both produce 2 . Versions before 3 used : round(0.5) is 1.0 , round(-0.5) is −1.0 . Python allows boolean expressions with multiple equality relations in a manner that is consistent with general use in mathematics. For example, the expression a < b < c tests whether a is less than b and b is less than c . C-derived languages interpret this expression differently: in C, the expression would first evaluate a < b , resulting in 0 or 1, and that result would then be compared with c . Python uses for all integer operations. The Decimal type/class in the decimal module provides to a pre-defined arbitrary precision and several rounding modes. The Fraction class in the fractions module provides arbitrary precision for . Due to Python's extensive mathematics library, and the third-party library that further extends the native capabilities, it is frequently used as a scientific scripting language to aid in problems such as numerical data processing and manipulation. Programming examples program: print ( 'Hello, world!' ) Program to calculate the of a positive integer: n = int ( input ( 'Type a number, and its factorial will be printed: ' )) if n < 0 : raise ValueError ( 'You must enter a non-negative integer' ) factorial = 1 for i in range ( 2 , n + 1 ): factorial *= i print ( factorial ) Libraries Python's large standard library provides tools suited to many tasks and is commonly cited as one of its greatest strengths. For Internet-facing applications, many standard formats and protocols such as and are supported. It includes modules for creating , connecting to , , arithmetic with arbitrary-precision decimals, manipulating , and . Some parts of the standard library are covered by specifications—for example, the (WSGI) implementation wsgiref follows PEP 333 —but most are specified by their code, internal documentation, and . However, because most of the standard library is cross-platform Python code, only a few modules need altering or rewriting for variant implementations. As of 14 November 2022, the (PyPI), the official repository for third-party Python software, contains over 415,000 packages with a wide range of functionality, including: Development environments See also: Most Python implementations (including CPython) include a (REPL), permitting them to function as a for which users enter statements sequentially and receive results immediately. Python also comes with an called , which is more beginner-oriented. Other shells, including and , add further abilities such as improved auto-completion, session state retention, and . As well as standard desktop , there are -based IDEs, including , for developing science- and math-related programs; , a browser-based IDE and hosting environment; and Canopy IDE, a commercial IDE emphasizing . Implementations See also: Reference implementation is the of Python. It is written in C, meeting the standard (Python 3.11 uses ) with several select features. CPython includes its own C extensions, but third-party extensions are not limited to older C versions—e.g. they can be implemented with or C++. ) It Python programs into an intermediate which is then executed by its . CPython is distributed with a large standard library written in a mixture of C and native Python, and is available for many platforms, including Windows (starting with Python 3.9, the Python installer deliberately fails to install on and 8; was supported until Python 3.5) and most modern systems, including macOS (and Macs, since Python 3.9.1, with experimental installer) and unofficial support for e.g. . Platform portability was one of its earliest priorities. (During Python 1 and 2 development, even and were supported, but support has since been dropped for many platforms.) Other implementations is a fast, compliant interpreter of Python 2.7 and 3.8. Its often brings a significant speed improvement over CPython but some libraries written in C cannot be used with it. is a significant fork of CPython that implements ; it does not use the in the same way, thus allowing massively concurrent programs. PyPy also has a stackless version. and are Python 3 variants optimized for , including . Pyston is a variant of the Python runtime that uses just-in-time compilation to speed up the execution of Python programs. Cinder is a performance-oriented fork of CPython 3.8 that contains a number of optimizations including bytecode inline caching, eager evaluation of coroutines, a method-at-a-time , and an experimental bytecode compiler. Unsupported implementations Other just-in-time Python compilers have been developed, but are now unsupported: Google began a project named in 2009, with the aim of speeding up the Python interpreter fivefold by using the , and of improving its multithreading ability to scale to thousands of cores, while ordinary implementations suffer from the . is a discontinued compiler that integrates with CPython and transforms bytecode to machine code at runtime. The emitted code is specialized for certain and is faster than the standard Python code. Psyco does not support Python 2.7 or later. was a Python 2 interpreter for mobile phones released by in 2005. It implemented many of the modules from the standard library and some additional modules for integrating with the operating system. The Nokia also supports Python with widget libraries, enabling programs to be written and run on the target device. Cross-compilers to other languages There are several compilers to high-level object languages, with either unrestricted Python, a restricted subset of Python, or a language similar to Python as the source language: Brython, Transcrypt and (latest release in 2012) compile Python to . compiles (a superset of) Python  to C (while the resulting code is also usable with Python and also e.g. C++). compiles Python into C. uses LLVM to compile a subset of Python to machine code. Pythran compiles a subset of Python 3 to C++ ( ). can be compiled to C, and is used to build the PyPy interpreter of Python. The Python → 11l → C++ transpiler compiles a subset of Python 3 to C++ ( ). Specialized: is a Python-based (HDL), that converts MyHDL code to or code. Older projects (or not to be used with Python 3.x and latest syntax): Google's Grumpy (latest release in 2017) Python 2 to . allows running Python 2.7 programs (and an , released in 2021, is also available for "Python 3.4, although features and behaviors from later versions may be included" ) on the .NET . compiles Python 2.7 to Java bytecode, allowing the use of the Java libraries from a Python program. (latest release in 2010) and (latest release in 2013) compile to C and C++ respectively. Performance Performance comparison of various Python implementations on a non-numerical (combinatorial) workload was presented at EuroSciPy '13. Python's performance compared to other programming languages is also benchmarked by . Development Python's development is conducted largely through the Python Enhancement Proposal (PEP) process, the primary mechanism for proposing major new features, collecting community input on issues, and documenting Python design decisions. Python coding style is covered in PEP 8. Outstanding PEPs are reviewed and commented on by the Python community and the steering council. Enhancement of the language corresponds with the development of the CPython reference implementation. The mailing list python-dev is the primary forum for the language's development. Specific issues were originally discussed in the hosted at by the foundation. In 2022, all issues and discussions were migrated to . Development originally took place on a source-code repository running , until Python moved to in January 2017. CPython's public releases come in three types, distinguished by which part of the version number is incremented: Backward-incompatible versions, where code is expected to break and needs to be manually . The first part of the version number is incremented. These releases happen infrequently—version 3.0 was released 8 years after 2.0. According to Guido van Rossum, a version 4.0 is very unlikely to ever happen. Major or "feature" releases are largely compatible with the previous version but introduce new features. The second part of the version number is incremented. Starting with Python 3.9, these releases are expected to happen annually. Each major version is supported by bug fixes for several years after its release. Bugfix releases, which introduce no new features, occur about every 3 months and are made when a sufficient number of bugs have been fixed upstream since the last release. Security vulnerabilities are also patched in these releases. The third and final part of the version number is incremented. Many are also released as previews and for testing before final releases. Although there is a rough schedule for each release, they are often delayed if the code is not ready. Python's development team monitors the state of the code by running the large suite during development. The major on Python is . There are also special Python mentoring programs, such as . Python 3.10 deprecated wstr (to be removed in Python 3.12; meaning Python extensions need to be modified by then), and added to the language. API documentation generators Tools that can generate documentation for Python API include (available as part of the standard library), , and its forks, and , among others. Naming Python's name is derived from the British comedy group , whom Python creator Guido van Rossum enjoyed while developing the language. Monty Python references appear frequently in Python code and culture; for example, the often used in Python literature are instead of the traditional . The official Python documentation also contains various references to Monty Python routines. The prefix Py- is used to show that something is related to Python. Examples of the use of this prefix in names of Python applications or libraries include , a of to Python (commonly used to create games); and , which bind and GTK to Python respectively; and , a Python implementation originally written in Python. Popularity Since 2003, Python has consistently ranked in the top ten most popular programming languages in the where as of December 2022 it was the most popular language (ahead of C, C++, and ). It was selected Programming Language of the Year (for "the highest rise in ratings in a year") in 2007, 2010, 2018, and 2020 (the only language to have done so four times as of 2020 ). An empirical study found that scripting languages, such as Python, are more productive than conventional languages, such as C and Java, for programming problems involving string manipulation and search in a dictionary, and determined that memory consumption was often "better than Java and not much worse than C or C++". Large organizations that use Python include , , , , , , , , , and some smaller entities like and . The social news networking site was written mostly in Python. Uses Main article: Python Powered Python can serve as a for , e.g., via for the . With , a standard API has evolved to facilitate these applications. like , , , , , , , Bottle, and support developers in the design and maintenance of complex applications. Pyjs and can be used to develop the client-side of Ajax-based applications. can be used as a to a relational database. is a framework to program communications between computers, and is used (for example) by . Libraries such as , , and allow the effective use of Python in scientific computing, with specialized libraries such as and providing domain-specific functionality. is a with a programmable in Python: its library covers many aspects of , including , , , , and . has Python bindings with a rich set of features for and . Python is commonly used in projects and machine learning projects with the help of libraries like , , , and . As a scripting language with a , simple syntax, and rich text processing tools, Python is often used for . Python can also be used to create games, with libraries such as , which can make 2D games. Python has been successfully embedded in many software products as a scripting language, including in software such as , 3D parametric modelers like , 3D animation packages such as , , , , , , , , , the visual effects compositor , 2D imaging programs like , , and , and programs like and . uses Python as a to show complex structures such as C++ containers. promotes Python as the best choice for writing scripts in . It has also been used in several video games, and has been adopted as first of the three available in , the other two being and . Many operating systems include Python as a standard component. It ships with most , (using Python 2.7), (as a package), , and (as a package) and can be used from the command line (terminal). Many Linux distributions use installers written in Python: uses the installer, while and use the installer. uses Python in its , . Python is used extensively in the industry, including in exploit development. Most of the software for the XO, developed at since 2008, is written in Python. The project has adopted Python as its main user-programming language. includes Python and intends to replace Java with Python. Its Python Scripting Provider is a core feature since Version 4.0 from 7 February 2013. Languages influenced by Python Python's design and philosophy have influenced many other programming languages: uses indentation, a similar syntax, and a similar object model. uses indentation and a similar syntax, and its Acknowledgements document lists Python first among languages that influenced it. , a programming language that cross-compiles to JavaScript, has Python-inspired syntax. / borrowed iterators and from Python. , a scripting language very similar to Python, built-in to the game engine. is designed for the "speed of working in a dynamic language like Python" and shares the same syntax for slicing arrays. was motivated by the desire to bring the Python design philosophy to . was designed to be "as usable for general programming as Python". uses indentation and similar syntax. 's creator, , has said: "I wanted a scripting language that was more powerful than Perl, and more object-oriented than Python. That's why I decided to design my own language." , a programming language developed by Apple, has some Python-inspired syntax. Python's development practices have also been emulated by other languages. For example, the practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (in Python, a PEP) is also used in , , and Swift. See also References . docs.python.org . from the original on 24 October 2012 . Retrieved 28 March 2021 . . alt.sources archives. from the original on 11 August 2021 . Retrieved 11 August 2021 . . 5 April 2023 . Retrieved 6 April 2023 . . 5 April 2023 . Retrieved 5 April 2023 . . wiki.python.org . from the original on 14 March 2021 . Retrieved 27 January 2021 . . Python.org . from the original on 14 June 2020 . Retrieved 14 June 2018 . . docs.python.org . Retrieved 17 May 2022 . . docs.python.org . Retrieved 17 May 2022 . . Python.org . from the original on 8 August 2018 . Retrieved 24 May 2021 . Holth, Moore (30 March 2014). . from the original on 26 December 2018 . Retrieved 12 November 2015 . File extension .pyo was removed in Python 3.5. See 1 June 2020 at the . from the original on 15 June 2020 . Retrieved 25 May 2019 . ^ . General Python FAQ . Python Software Foundation. from the original on 24 October 2012 . Retrieved 22 March 2007 . I had extensive experience with implementing an interpreted language in the ABC group at CWI, and from working with this group I had learned a lot about language design. This is the origin of many Python features, including the use of indentation for statement grouping and the inclusion of very high-level data types (although the details are all different in Python). . from the original on 22 October 2019 . Retrieved 7 January 2020 . ^ Kuchling, Andrew M. (22 December 2006). . amk.ca . Archived from on 1 May 2007 . Retrieved 12 March 2012 . I'd spent a summer at DEC's Systems Research Center, which introduced me to Modula-2+; the Modula-3 final report was being written there at about the same time. What I learned there later showed up in Python's exception handling, modules, and the fact that methods explicitly contain 'self' in their parameter list. String slicing came from Algol-68 and Icon. ^ . docs.python.org . from the original on 14 June 2020 . Retrieved 22 November 2016 . This module implements a number of iterator building blocks inspired by constructs from APL, Haskell, and SML. van Rossum, Guido (1993). "An Introduction to Python for UNIX/C Programmers". Proceedings of the NLUUG Najaarsconferentie (Dutch UNIX Users Group) . . even though the design of C is far from ideal, its influence on Python is considerable. ^ . The Python Tutorial . Python Software Foundation. from the original on 23 October 2012 . Retrieved 20 February 2012 . It is a mixture of the class mechanisms found in C++ and Modula-3 Lundh, Fredrik. . effbot.org . from the original on 23 November 2019 . Retrieved 21 November 2017 . replace "CLU" with "Python", "record" with "instance", and "procedure" with "function or method", and you get a pretty accurate description of Python's object model. Simionato, Michele. . Python Software Foundation. from the original on 20 August 2020 . Retrieved 29 July 2014 . The C3 method itself has nothing to do with Python, since it was invented by people working on Dylan and it is described in a paper intended for lispers Kuchling, A. M. . Python v2.7.2 documentation . Python Software Foundation. from the original on 24 October 2012 . Retrieved 9 February 2012 . List comprehensions and generator expressions [...] are a concise notation for such operations, borrowed from the functional programming language Haskell. Schemenauer, Neil; Peters, Tim; Hetland, Magnus Lie (18 May 2001). . Python Enhancement Proposals . Python Software Foundation. from the original on 5 June 2020 . Retrieved 9 February 2012 . . Python 3 documentation . Python Software Foundation. from the original on 4 June 2016 . Retrieved 24 July 2015 . By popular demand, a few features commonly found in functional programming languages like Lisp have been added to Python. With the lambda keyword, small anonymous functions can be created. . docs.python.org . Retrieved 6 September 2022 . This module provides regular expression matching operations similar to those found in Perl. . coffeescript.org . from the original on 12 June 2020 . Retrieved 3 July 2018 . . from the original on 1 June 2020 . Retrieved 28 February 2020 . . www.2ality.com . 24 February 2013. from the original on 26 December 2018 . Retrieved 15 May 2015 . Rauschmayer, Axel. . O'Reilly, Speaking JavaScript . from the original on 26 December 2018 . Retrieved 15 May 2015 . ^ . Julia website . February 2012. from the original on 2 May 2020 . Retrieved 5 June 2014 . We want something as usable for general programming as Python [...] Ring Team (4 December 2017). . ring-lang.net . . from the original on 25 December 2018 . Retrieved 4 December 2017 . Bini, Ola (2007). . Berkeley: APress. p. . . Lattner, Chris (3 June 2014). . Chris Lattner. from the original on 25 December 2018 . Retrieved 3 June 2014 . The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. Kuhlman, Dave. . Section 1.1. Archived from (PDF) on 23 June 2012. . Python Software Foundation. from the original on 20 April 2012 . Retrieved 24 April 2012 . , second section "Fans of Python use the phrase "batteries included" to describe the standard library, which covers everything from asynchronous processing to zip files." . Python.org . from the original on 5 May 2021 . Retrieved 11 October 2021 . Rossum, Guido Van (20 January 2009). . The History of Python . from the original on 5 June 2020 . Retrieved 5 March 2021 . Peterson, Benjamin (20 April 2020). . Python Insider . from the original on 26 April 2020 . Retrieved 27 April 2020 . . Stack Overflow . Retrieved 12 August 2022 . . JetBrains: Developer Tools for Professionals and Teams . from the original on 1 March 2021 . Retrieved 5 March 2021 . ^ . TIOBE . Retrieved 3 January 2023 . The TIOBE Programming Community index is an indicator of the popularity of programming languages Updated as required. . pypl.github.io . from the original on 14 March 2017 . Retrieved 26 March 2021 . ^ Venners, Bill (13 January 2003). . Artima Developer . Artima. from the original on 1 September 2016 . Retrieved 22 March 2007 . (29 August 2000). . Python-Dev (Mailing list). from the original on 14 July 2018 . Retrieved 13 March 2011 . van Rossum, Guido (20 January 2009). . The History of Python . from the original on 5 June 2020 . Retrieved 20 January 2009 . Fairchild, Carlie (12 July 2018). . Linux Journal . from the original on 13 July 2018 . Retrieved 13 July 2018 . . Python Software Foundation. from the original on 4 June 2020 . Retrieved 4 May 2019 . . Python.org . from the original on 27 May 2021 . Retrieved 25 August 2021 . Kuchling, A. M.; Zadka, Moshe (16 October 2000). . Python Software Foundation. from the original on 23 October 2012 . Retrieved 11 February 2012 . van Rossum, Guido (5 April 2006). . Python Enhancement Proposals . Python Software Foundation. Archived from on 3 March 2016 . Retrieved 27 June 2009 . . docs.python.org . from the original on 4 June 2020 . Retrieved 2 February 2021 . . python.org . from the original on 19 May 2020 . Retrieved 9 January 2017 . . python.org . from the original on 4 June 2020 . Retrieved 9 January 2017 . . Python.org . from the original on 12 January 2020 . Retrieved 22 September 2019 . . Python.org . from the original on 13 January 2020 . Retrieved 22 September 2019 . Langa, Łukasz (19 February 2021). . Python Insider . from the original on 25 February 2021 . Retrieved 26 February 2021 . . access.redhat.com . from the original on 6 March 2021 . Retrieved 26 February 2021 . . cve.mitre.org . from the original on 27 February 2021 . Retrieved 26 February 2021 . . cve.mitre.org . from the original on 24 February 2021 . Retrieved 26 February 2021 . Langa, Łukasz (24 March 2022). . Python Insider . Retrieved 19 April 2022 . Langa, Łukasz (16 March 2022). . Python Insider . Retrieved 19 April 2022 . Langa, Łukasz (17 May 2022). . Python Insider . Retrieved 21 May 2022 . . pythoninsider.blogspot.com . 7 September 2022 . Retrieved 16 September 2022 . . cve.mitre.org . Retrieved 16 September 2022 . corbet (24 October 2022). . lwn.net . Retrieved 15 November 2022 . The Cain Gang Ltd. (PDF) . Archived from (PDF) on 30 May 2009 . Retrieved 27 June 2009 . . The Python Language Reference . Python Software Foundation. from the original on 15 December 2018 . Retrieved 27 June 2009 . . from the original on 23 November 2019 . Retrieved 24 September 2011 . . from the original on 15 June 2020 . Retrieved 24 September 2011 . . from the original on 13 June 2020 . Retrieved 22 July 2012 . . Docs.python.org. from the original on 18 October 2012 . Retrieved 5 June 2020 . Since Python makes heavy use of malloc() and free() , it needs a strategy to avoid memory leaks as well as the use of freed memory. The chosen method is called reference counting . ^ Hettinger, Raymond (30 January 2002). . Python Enhancement Proposals . Python Software Foundation. from the original on 14 June 2020 . Retrieved 19 February 2012 . . Docs.python.org. from the original on 14 June 2020 . Retrieved 22 November 2016 . ^ Peters, Tim (19 August 2004). . Python Enhancement Proposals . Python Software Foundation. from the original on 26 December 2018 . Retrieved 24 November 2008 . Martelli, Alex; Ravenscroft, Anna; Ascher, David (2005). . . p. 230. . from the original on 23 February 2020 . Retrieved 14 November 2015 . . ebeab . 21 January 2014. Archived from on 30 January 2014. . General Python FAQ . Docs.python.org. from the original on 24 October 2012 . Retrieved 3 January 2023 . . Archived from on 11 May 2019 . Retrieved 3 July 2018 . . docs.python.org . from the original on 22 January 2021 . Retrieved 5 November 2022 . stuff=['spam', 'eggs', 'lumberjack', 'knights', 'ni'] Clark, Robert (26 April 2019). . Medium . from the original on 13 August 2021 . Retrieved 20 January 2021 . . docs.python-guide.org . from the original on 27 January 2021 . Retrieved 20 January 2021 . . General Python FAQ . Python Software Foundation. from the original on 24 October 2012 . Retrieved 21 March 2007 . . Secnetix.de. Archived from on 18 February 2018 . Retrieved 19 April 2011 . Guttag, John V. (12 August 2016). Introduction to Computation and Programming Using Python: With Application to Understanding Data . MIT Press. . . Python.org . from the original on 17 April 2019 . Retrieved 26 March 2019 . . docs.python.org . Retrieved 9 May 2022 . . Python.org . from the original on 4 August 2019 . Retrieved 20 March 2018 . van Rossum, Guido (22 April 2009). . Neopythonic.blogspot.be. from the original on 19 May 2018 . Retrieved 3 December 2012 . van Rossum, Guido (9 February 2006). . Artima forums . Artima. from the original on 17 January 2020 . Retrieved 21 March 2007 . van Rossum, Guido; Eby, Phillip J. (10 May 2005). . Python Enhancement Proposals . Python Software Foundation. from the original on 29 May 2020 . Retrieved 19 February 2012 . . Python.org. from the original on 4 June 2020 . Retrieved 3 December 2012 . . python.org . from the original on 20 July 2006 . Retrieved 30 July 2014 . . python.org . from the original on 4 June 2020 . Retrieved 1 January 2016 . . python.org . from the original on 14 May 2020 . Retrieved 1 January 2016 . . from the original on 8 June 2020 . Retrieved 14 October 2019 . van Rossum, Guido; Hettinger, Raymond (7 February 2003). . Python Enhancement Proposals . Python Software Foundation. from the original on 13 March 2016 . Retrieved 13 July 2011 . . python.org . from the original on 14 June 2020 . Retrieved 1 October 2017 . . python.org . from the original on 10 June 2020 . Retrieved 17 October 2018 . ^ . python.org . from the original on 15 June 2020 . Retrieved 8 March 2017 . . Design and History FAQ . Python Software Foundation. from the original on 24 October 2012 . Retrieved 19 February 2012 . Sweigart, Al (2020). . No Starch Press. p. 322. . from the original on 13 August 2021 . Retrieved 7 July 2021 . . Archived from on 26 October 2012 . Retrieved 12 January 2011 . . LWN.net. 24 December 2014. from the original on 20 June 2019 . Retrieved 5 May 2015 . . from the original on 6 June 2020 . Retrieved 28 January 2017 . . docs.python.org . from the original on 6 June 2020 . Retrieved 6 June 2020 . Almost all machines today (November 2000) use IEEE-754 floating point arithmetic, and almost all platforms map Python floats to IEEE-754 "double precision". Zadka, Moshe; van Rossum, Guido (11 March 2001). . Python Enhancement Proposals . Python Software Foundation. from the original on 28 May 2020 . Retrieved 24 September 2011 . . from the original on 14 June 2020 . Retrieved 3 October 2019 . . python.org . from the original on 29 May 2020 . Retrieved 3 July 2018 . ^ Zadka, Moshe; van Rossum, Guido (11 March 2001). . Python Enhancement Proposals . Python Software Foundation. from the original on 28 May 2020 . Retrieved 23 October 2013 . . 24 August 2010. from the original on 5 June 2020 . Retrieved 25 August 2010 . , The Python standard library, release 3.2, §2: Built-in functions , from the original on 25 October 2012 , retrieved 14 August 2011 , The Python standard library, release 2.7, §2: Built-in functions , from the original on 27 October 2012 , retrieved 14 August 2011 Beazley, David M. (2009). (4th ed.). p. . . Kernighan, Brian W.; Ritchie, Dennis M. (1988). (2nd ed.). p. . Batista, Facundo. . Python.org . from the original on 4 June 2020 . Retrieved 26 September 2015 . . docs.python.org . from the original on 23 December 2019 . Retrieved 26 September 2015 . . www.stat.washington.edu . Archived from on 31 May 2020 . Retrieved 3 February 2019 . Shell, Scott (17 June 2014). (PDF) . (PDF) from the original on 4 February 2019 . Retrieved 3 February 2019 . Piotrowski, Przemyslaw (July 2006). . Oracle Technology Network . Oracle. from the original on 2 April 2019 . Retrieved 12 March 2012 . Batista, Facundo (17 October 2003). . Python Enhancement Proposals . Python Software Foundation. from the original on 4 June 2020 . Retrieved 24 November 2008 . Eby, Phillip J. (7 December 2003). . Python Enhancement Proposals . Python Software Foundation. from the original on 14 June 2020 . Retrieved 19 February 2012 . . Modulecounts . 14 November 2022. from the original on 26 June 2022. Enthought, Canopy. . www.enthought.com . Archived from on 15 July 2017 . Retrieved 20 August 2016 . . peps.python.org . Retrieved 28 April 2022 . . docs.python.org . from the original on 3 March 2021 . Retrieved 1 March 2021 . van Rossum, Guido (5 June 2001). . Python Enhancement Proposals . Python Software Foundation. from the original on 1 June 2020 . Retrieved 24 November 2008 . . Docs.python.org. from the original on 5 June 2020 . Retrieved 16 February 2016 . (PDF) . (PDF) from the original on 6 August 2012 . Retrieved 19 April 2011 . . docs.python.org . from the original on 7 February 2021 . Retrieved 8 February 2021 . . Python.org . from the original on 8 December 2020 . Retrieved 13 December 2020 . . www.vmspython.org . from the original on 2 December 2020 . Retrieved 4 December 2020 . . Oreilly.com. from the original on 16 July 2014 . Retrieved 24 November 2008 . . Python.org . from the original on 27 November 2020 . Retrieved 4 December 2020 . . Pypy.org. from the original on 6 June 2020 . Retrieved 3 December 2012 . Team, The PyPy (28 December 2019). . PyPy . Retrieved 8 January 2022 . . Speed.pypy.org. from the original on 10 May 2021 . Retrieved 3 December 2012 . . Doc.pypy.org. from the original on 4 June 2020 . Retrieved 17 July 2013 . . LEGO Education . from the original on 7 June 2020 . Retrieved 17 April 2019 . Yegulalp, Serdar (29 October 2020). . . from the original on 27 January 2021 . Retrieved 26 January 2021 . . . from the original on 4 May 2021 . Retrieved 4 May 2021 . . Google Project Hosting . 15 December 2009. from the original on 11 April 2016 . Retrieved 24 September 2011 . . Stochastic Geometry . 29 April 2010. from the original on 20 June 2019 . Retrieved 9 July 2015 . . brython.info . from the original on 3 August 2018 . Retrieved 21 January 2021 . . transcrypt.org . from the original on 19 August 2018 . Retrieved 22 December 2020 . . InfoQ . from the original on 5 December 2020 . Retrieved 20 January 2021 . . nuitka.net . from the original on 30 May 2020 . Retrieved 18 August 2017 . Borderies, Olivier (24 January 2019). . Medium . from the original on 25 March 2020 . Retrieved 25 March 2020 . . pythran.readthedocs.io . from the original on 19 February 2020 . Retrieved 25 March 2020 . Guelton, Serge; Brunet, Pierrick; Amini, Mehdi; Merlini, Adrien; Corbillon, Xavier; Raynaud, Alan (16 March 2015). . Computational Science & Discovery . IOP Publishing. (1): 014001. : . : . . . 10 April 2020. from the original on 15 April 2020 . Retrieved 25 March 2020 – via GitHub. . opensource.google . from the original on 24 April 2020 . Retrieved 25 March 2020 . Francisco, Thomas Claburn in San. . www.theregister.com . from the original on 7 March 2021 . Retrieved 20 January 2021 . . . from the original on 28 September 2021. . ironpython.net . from the original on 17 April 2021. . www.jython.org . from the original on 22 April 2021 . Retrieved 22 April 2021 . Murri, Riccardo (2013). Performance of Python runtimes on a non-numeric scientific code . European Conference on Python in Science (EuroSciPy). : . : . . from the original on 14 June 2020 . Retrieved 30 April 2020 . ^ Warsaw, Barry; Hylton, Jeremy; Goodger, David (13 June 2000). . Python Enhancement Proposals . Python Software Foundation. from the original on 6 June 2020 . Retrieved 19 April 2011 . . Python.org . from the original on 17 April 2019 . Retrieved 26 March 2019 . Cannon, Brett. . python.org . Python Software Foundation. Archived from on 1 June 2009 . Retrieved 27 June 2009 . . . devguide.python.org . from the original on 9 November 2020 . Retrieved 17 December 2019 . Hughes, Owen (24 May 2021). . TechRepublic . Retrieved 16 May 2022 . . Python.org . from the original on 14 June 2020 . Retrieved 6 November 2019 . . lwn.net . from the original on 6 November 2019 . Retrieved 6 November 2019 . Norwitz, Neal (8 April 2002). . from the original on 15 December 2018 . Retrieved 27 June 2009 . ^ Aahz; Baxter, Anthony (15 March 2001). . Python Enhancement Proposals . Python Software Foundation. from the original on 5 June 2020 . Retrieved 27 June 2009 . . Python Developer's Guide . Python Software Foundation. from the original on 5 June 2020 . Retrieved 24 September 2011 . . docs.python.org . from the original on 23 June 2020 . Retrieved 14 February 2021 . . Python.org . from the original on 5 March 2021 . Retrieved 14 February 2021 . . Python.org . from the original on 6 May 2021 . Retrieved 14 February 2021 . . Python.org . from the original on 11 November 2020 . Retrieved 22 March 2021 . ^ . The Python Tutorial . Python Software Foundation. from the original on 26 October 2012 . Retrieved 20 February 2012 . . . Stack Exchange. 17 February 2011. from the original on 20 June 2019 . Retrieved 6 May 2011 . Lutz, Mark (2009). . O'Reilly Media, Inc. p. 17. . from the original on 17 July 2017 . Retrieved 9 May 2017 . Fehily, Chris (2002). . Peachpit Press. p. xv. . from the original on 17 July 2017 . Retrieved 9 May 2017 . Blake, Troy (18 January 2021). . Technology News and Information by SeniorDBA . from the original on 21 March 2021 . Retrieved 26 February 2021 . Prechelt, Lutz (14 March 2000). (PDF) . (PDF) from the original on 3 January 2020 . Retrieved 30 August 2013 . . Python Software Foundation. from the original on 3 June 2020 . Retrieved 8 January 2012 . . Python Software Foundation. from the original on 21 August 2018 . Retrieved 15 January 2009 . . CERN Bulletin . CERN Publications (31/2006). 31 July 2006. from the original on 15 January 2013 . Retrieved 11 February 2012 . Shafer, Daniel G. (17 January 2003). . Python Software Foundation. from the original on 5 June 2020 . Retrieved 24 November 2008 . . Facebook for Developers . from the original on 19 February 2019 . Retrieved 19 June 2018 . . Instagram Engineering. 11 December 2016. from the original on 15 June 2020 . Retrieved 27 May 2019 . . Spotify Labs . 20 March 2013. from the original on 10 June 2020 . Retrieved 25 July 2018 . Fortenberry, Tim (17 January 2003). . Python Software Foundation. from the original on 6 June 2020 . Retrieved 11 February 2012 . Taft, Darryl K. (5 March 2007). . eWeek.com . Ziff Davis Holdings. from the original on 13 August 2021 . Retrieved 24 September 2011 . , The Reddit Archives, from the original on 1 June 2020 , retrieved 20 March 2019 . 2012. from the original on 13 August 2021 . Retrieved 18 December 2012 . Oliphant, Travis (2007). . Computing in Science and Engineering . (3): 10–20. : . . : . . from the original on 15 June 2020 . Retrieved 10 April 2015 . Millman, K. Jarrod; Aivazis, Michael (2011). . Computing in Science and Engineering . (2): 9–12. : . : . from the original on 19 February 2019 . Retrieved 7 July 2014 . , Innovative Computing in Science Education, archived from on 15 June 2020 , retrieved 22 April 2019 . docs.opencv.org . from the original on 23 September 2020 . Retrieved 14 September 2020 . ; Monga, Rajat;  et al. (9 November 2015). (PDF) . TensorFlow.org . Google Research. (PDF) from the original on 20 November 2015 . Retrieved 10 November 2015 . Piatetsky, Gregory. . KDnuggets . KDnuggets. from the original on 15 November 2019 . Retrieved 30 May 2018 . . scikit-learn.org . from the original on 6 May 2020 . Retrieved 30 November 2018 . . . Google Cloud Platform Blog . from the original on 18 May 2016 . Retrieved 19 May 2016 . . www.nltk.org . from the original on 13 June 2020 . Retrieved 10 April 2020 . . 26 July 2013. Archived from on 17 July 2013 . Retrieved 26 July 2013 . . Archived from on 19 March 2008. . ArcGIS Desktop Help 9.2 . Environmental Systems Research Institute. 17 November 2006. from the original on 5 June 2020 . Retrieved 11 February 2012 . CCP porkbelly (24 August 2010). . EVE Community Dev Blogs . . from the original on 11 January 2014 . Retrieved 11 January 2014 . As you may know, EVE has at its core the programming language known as Stackless Python. Caudill, Barry (20 September 2005). . Sid Meier's Civilization IV Developer Blog . . Archived from on 2 December 2010. we created three levels of tools ... The next level offers Python and XML support, letting modders with more experience manipulate the game world and everything in it. . Google Documents List Data API v1.0 . Archived from on 15 July 2010. . Python Software Foundation. from the original on 17 June 2020 . Retrieved 10 January 2020 . . Archived from on 16 February 2009. . Core Security . from the original on 9 June 2020 . Retrieved 10 April 2020 . . Sugar Labs. from the original on 9 January 2009 . Retrieved 11 February 2012 . . LibreOffice.org . . 2013. from the original on 9 February 2014 . Retrieved 25 February 2013 . . boo.codehaus.org . Codehaus Foundation. Archived from on 11 December 2008 . Retrieved 24 November 2008 . Esterbrook, Charles. . cobra-language.com . Cobra Language. from the original on 8 February 2008 . Retrieved 7 April 2010 . . wiki.ecmascript.org. Archived from on 20 October 2007 . Retrieved 24 November 2008 . . Godot Engine documentation . from the original on 28 April 2021 . Retrieved 10 May 2021 . Kincaid, Jason (10 November 2009). . TechCrunch . from the original on 18 January 2010 . Retrieved 29 January 2010 . Strachan, James (29 August 2003). . Archived from on 5 April 2007 . Retrieved 11 June 2007 . Yegulalp, Serdar (16 January 2017). . InfoWorld . from the original on 13 October 2018 . Retrieved 7 June 2020 . Nim's syntax is strongly reminiscent of Python's, as it uses indented code blocks and some of the same syntax (such as the way if/elif/then/else blocks are constructed). . Linuxdevcenter.com. from the original on 28 April 2018 . Retrieved 3 December 2012 . (3 June 2014). . Chris Lattner. from the original on 22 December 2015 . Retrieved 3 June 2014 . I started work on the Swift Programming Language in July of 2010. I implemented much of the basic language structure, with only a few people knowing of its existence. A few other (amazing) people started contributing in earnest late in 2011, and it became a major focus for the Apple Developer Tools group in July 2013 [...] drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. Kupries, Andreas; Fellows, Donal K. (14 September 2000). . tcl.tk . Tcl Developer Xchange. from the original on 13 July 2017 . Retrieved 24 November 2008 . Gustafsson, Per; Niskanen, Raimo (29 January 2007). . erlang.org. from the original on 15 June 2020 . Retrieved 19 April 2011 . . Swift Programming Language Evolution repository on GitHub . 18 February 2020. from the original on 27 April 2020 . Retrieved 27 April 2020 . Sources . Wiki.python.org. 19 July 2012. Archived from on 1 November 2012 . Retrieved 3 December 2012 . Paine, Jocelyn, ed. (August 2005). . AI Expert Newsletter . Amzi!. Archived from on 26 March 2012 . Retrieved 11 February 2012 . . Pypi.python.org . Retrieved 17 July 2013 . & (2009). Artificial Intelligence: A Modern Approach (3rd ed.). Upper Saddle River, NJ: Prentice Hall. . Further reading Downey, Allen B. (May 2012). Think Python: How to Think Like a Computer Scientist (version 1.6.6 ed.). . Hamilton, Naomi (5 August 2008). . Computerworld . Archived from on 29 December 2008 . Retrieved 31 March 2010 . Lutz, Mark (2013). Learning Python (5th ed.). O'Reilly Media. . Summerfield, Mark (2009). Programming in Python 3 (2nd ed.). Addison-Wesley Professional. . Ramalho, Luciano (May 2022). (2nd ed.). O'Reilly Media. . External links at Wikipedia's from Commons from Wikiquote from Wikibooks from Wikiversity from Wikidata ... ... Topics Bottle ... Differentiable computing Concepts Applications Hardware Software libraries Implementations Audio–visual Verbal Decisional People Organizations Architectures Portals Categories General Types and standards Challenges Related topics ( Ju lia, Py thon, R ) ( , , , ) ( ) IBM Statistics IBM (WPS) only add-ons for Excel Free ( Ju lia, Pyt hon, R ; ) Proprietary International National Other Retrieved from " " : Hidden categories: This page was last edited on 1 April 2023, at 05:42 (UTC) . Text is available under the ;
additional terms may apply.  By using this site, you agree to the and . Wikipedia® is a registered trademark of the , a non-profit organization. Toggle limited content width