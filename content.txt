Node.js - Wikipedia Main menu Main menu move to sidebar hide Navigation Contribute Languages Language links are at the top of the page across from the title. Personal tools Pages for logged out editors Contents move to sidebar hide Toggle Overview subsection Toggle Technical details subsection Toggle the table of contents Toggle the table of contents Node.js 48 languages English Tools Tools move to sidebar hide Actions General Print/export In other projects From Wikipedia, the free encyclopedia JavaScript runtime environment Node.js Initial release MayÂ 27, 2009 ; 13 years ago ( 2009-05-27 ) 20.0.0 / April 18, 2023 ; 8 days ago ( April 18, 2023 ) Written in , , , , , , , , , Website is a , server environment that can run on , , , , and more. Node.js is a , runs on the , and executes JavaScript code outside a . Node.js lets developers use JavaScript to write command line tools and for . The ability to run JavaScript code on the server is often used to generate content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm, unifying development around a single programming language, as opposed to using different languages for the server- versus client-side programming. Node.js has an capable of . These design choices aim to optimize and in web applications with many input/output operations, as well as for applications (e.g., programs and ). The Node.js project was previously governed by the Node.js Foundation, and has now merged with the to form the . OpenJS Foundation is facilitated by the 's Collaborative Projects program. Corporate users of Node.js software include , , , , , , , , , , and . History [ ] Ryan Dahl, creator of Node.js, in 2010 Node.js was written initially by in 2009, about thirteen years after the introduction of the first server-side JavaScript environment, LiveWire Pro Web. The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by . Dahl criticized the limited possibilities of the most popular web server in 2009, , to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections. Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009. Node.js combined 's JavaScript engine, an , and a low-level . In January 2010, a was introduced for the Node.js environment called . The package manager makes it easier for programmers to publish and share source code of Node.js packages and is designed to simplify installation, updating, and uninstallation of packages. In June 2011, Microsoft and Joyent implemented a native version of Node.js. The first Node.js build supporting Windows was released in July 2011. In January 2012, Dahl stepped aside, promoting coworker and creator Isaac Schlueter to manage the project. In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project. In December 2014, Fedor Indutny started io.js, a of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an alternative with a separate technical committee. Unlike Node.js, the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine. In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation. In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0. This merge brought V8 features into Node.js and a long-term support release cycle. As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merge. In 2019, the JS Foundation and Node.js Foundation merged to form the . On March 15 2023, Node.js 19.8.1 was released. Overview [ ] Node.js allows the creation of and networking tools using and a collection of "modules" that handle various core functionalities. Modules are provided for I/O, networking ( , , , , or ), data (buffers), functions, , and other core functions. Node.js's modules use an API designed to reduce the complexity of writing server applications. JavaScript is the only language that Node.js supports natively, but many languages are available. As a result, Node.js applications can be written in , , , and others. Node.js is primarily used to build network programs such as Web servers. The most significant difference between Node.js and is that most functions in PHP until completion (commands execute only after previous commands finish), while Node.js functions are (commands execute or even in , and use to signal completion or failure). Node.js is officially supported on , and 8.1 and Server 2012 (and later), with  tier 2 support for and and experimental support for . also works, and LTS versions available for (AS/400). The provided source code may also be built on similar operating systems to those officially supported or be modified by third parties to support others such as and servers. Platform architecture [ ] Node.js brings to , enabling development of fast web servers in JavaScript. Developers can create scalable servers without using , by using a simplified model of that uses callbacks to signal the completion of a task. Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming. Node.js was built on top of 's since it was open-sourced under the . It is proficient with internet fundamentals such as , , and . was also a well-known language, making Node.js accessible to the . Industry support [ ] There are thousands of open-source libraries for Node.js, most of them hosted on the website. There are multiple developer conferences and events that support the Node.js community, including NodeConf, Node Interactive, and Node Summit as well as a number of regional events. The open-source community has developed to accelerate the development of applications. Such frameworks include Connect, , , Feathers.js, Koa.js, Hapi.js, , , Derby, and many others. Various packages have also been created for interfacing with other languages or runtime environments such as . Modern desktop provide editing and debugging features specifically for Node.js applications. Such IDEs include , , , (with Node.js Tools for Visual Studio, or with Node definitions, ) , Enide Studio ( -based), and . Certain online web-based IDEs also support Node.js, such as , , , Koding, and the visual flow editor in . Node.js is supported across a number of cloud-hosting platforms like , , , and others. Releases [ ] Release Status Code name Release date Maintenance end Old version, no longer maintained: 0.10.x Old version, no longer maintained: End-of-Life 2013-03-11 2016-10-31 Old version, no longer maintained: 0.12.x Old version, no longer maintained: End-of-Life 2015-02-06 2016-12-31 Old version, no longer maintained: 4.x Old version, no longer maintained: End-of-Life Argon 2015-09-08 2018-04-30 Old version, no longer maintained: 5.x Old version, no longer maintained: End-of-Life 2015-10-29 2016-06-30 Old version, no longer maintained: 6.x Old version, no longer maintained: End-of-Life Boron 2016-04-26 2019-04-30 Old version, no longer maintained: 7.x Old version, no longer maintained: End-of-Life 2016-10-25 2017-06-30 Old version, no longer maintained: 8.x Old version, no longer maintained: End-of-Life Carbon 2017-05-30 2019-12-31 Old version, no longer maintained: 9.x Old version, no longer maintained: End-of-Life 2017-10-01 2018-06-30 Old version, no longer maintained: 10.x Old version, no longer maintained: End-of-Life Dubnium 2018-04-24 2021-04-30 Old version, no longer maintained: 11.x Old version, no longer maintained: End-of-Life 2018-10-23 2019-06-01 Old version, no longer maintained: 12.x Old version, no longer maintained: End-of-Life Erbium 2019-04-23 2022-04-30 Old version, no longer maintained: 13.x Old version, no longer maintained: End-of-Life 2019-10-22 2020-06-01 Older version, yet still maintained: 14.x Older version, yet still maintained: Maintenance LTS Fermium 2020-04-21 2023-04-30 Old version, no longer maintained: 15.x Old version, no longer maintained: End-of-Life 2020-10-20 2021-06-01 Older version, yet still maintained: 16.x Older version, yet still maintained: Maintenance LTS Gallium 2021-04-20 2023-09-11 Old version, no longer maintained: 17.x Old version, no longer maintained: End-of-Life 2021-10-19 2022-06-01 Older version, yet still maintained: 18.x Older version, yet still maintained: Active LTS Hydrogen 2022-04-19 2025-04-30 Current stable version: Current stable version: 2022-10-18 2023-06-01 Future release: 20.x Future release: Planned Iron 2023-04-18 2026-04-30 Future release: 21.x Future release: Planned 2023-10-17 2024-05-30 Future release: 22.x Future release: Planned 2024-04-15 2027-04-28 Future release: 23.x Future release: Planned 2024-10-14 2025-05-27 Old version Older version, still maintained Latest preview version Future release New major releases of Node.js are cut from the main branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release receives only critical fixes and documentation updates. The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation. Technical details [ ] Node.js is a JavaScript runtime environment that processes incoming requests in a loop, called the . Internals [ ] Node.js uses under the hood to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and -based systems such as Linux, , OSS on , and Unix. Threading [ ] Node.js operates on a , using calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread . The design of sharing a single thread among all the requests that use the is intended for building highly concurrent applications, where any function performing I/O must use a . To accommodate the single-threaded event loop, Node.js uses the libraryâwhich, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations. A thread pool handles the execution of parallel tasks in Node.js. The main thread function call posts tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. A downside of this single-threaded approach is that Node.js does not allow by increasing the number of of the machine it is running on without using an additional module, such as cluster, StrongLoop Process Manager, or pm2. However, developers can increase the default number of threads in the libuv thread pool. The server is likely to distribute these threads across multiple cores. Another problem is that long-lasting computations and other CPU-bound tasks freeze the entire event-loop until completion. [ ] V8 [ ] Main article: V8 is the JavaScript execution engine which was initially built for . It was then open-sourced by Google in 2008. Written in , V8 compiles JavaScript source code to native machine code . As of 2016, it also includes Ignition, a . Package management [ ] is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the , organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as to task runners such as . Unified API [ ] Node.js can be combined with a browser with a site, a database that supports JSON data (such as , , or ) and for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as , , , etc., Node.js allows the of the same model and service interface between client side and server side. Event loop [ ] Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small . Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads. In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead, callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed. WebAssembly [ ] Node.js supports and as of Node 14 has experimental support of , the WebAssembly System Interface. Native bindings [ ] See also: Node.js provides a way to create "add-ons" via a -based API called N-API, which can be used to produce loadable (importable) .node modules from source code written in C/C++. The modules can be directly loaded into memory and executed from within JS environment as simple CommonJS modules. The implementation of the N-API relies on internal C/C++ Node.js and V8 objects requiring users ( ) Node.js specific into their native source code. As the Node.js API is subject to breaking changes at a binary level, modules have to be built and shipped against specific Node.js versions to work properly. To address the issue, third parties have introduced open-sourced Ð¡/Ð¡++ wrappers on top of the API that partially alleviate the problem. They simplify interfaces, but as a side effect they may also introduce complexity which maintainers have to deal with. Even though the core functionality of Node.js resides in a JavaScript built-in library, modules written in C++ can be used to enhance capabilities and to improve performance of applications. In order to produce such modules one needs to have an appropriate C++ compiler and necessary headers (the latter are typically shipped with Node.js itself), e.g., , or . The N-API is similar to . Project governance [ ] In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success." The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates the administration of these projects to working groups or committees. The LTS group that manages long term supported releases is one such group. Other current groups include Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing. In August 2017, a third of the TSC members resigned due to a dispute related to the project's code of conduct. See also [ ] âa back-end runtime environment for JavaScript and TypeScript, also created by Ryan Dahl. References [ ] . . Retrieved 2 August 2014 . . 18 April 2023 . Retrieved 20 April 2023 . ^ . GitHub . 13 April 2022. . GitHub . Node.js Foundation. 17 September 2018 . Retrieved 17 September 2018 . . Open Source Initiative . 17 September 2018 . Retrieved 17 September 2018 . gcuomo (24 October 2013). . www.ibm.com . Retrieved 24 October 2013 . ^ Laurent Orsini (7 November 2013). . readwrite.com . Retrieved 6 February 2022 . . nodejs.org . Retrieved 4 July 2015 . . linuxfoundation.org . 4 July 2015 . Retrieved 4 July 2015 . , , 10 February 2015 Geitgey, Adam (30 October 2013). . Groupon. Archived from on 10 September 2015 . Retrieved 30 April 2014 . . . Retrieved 4 July 2015 . . VentureBeat. 2 May 2012 . Retrieved 10 May 2012 . . Retrieved 7 April 2015 . Baxter-Reynolds, Matthew (9 November 2011). . The Guardian . London . Retrieved 10 May 2012 . . Retrieved 2 August 2014 . 19 November 2014 . fluentconf.com. 28 May 2013. from the original on 15 December 2021 . Retrieved 11 September 2013 . . . Retrieved 2 August 2014 . . SAP. 10 March 2014. Archived from on 12 February 2014 . Retrieved 10 October 2018 . . VentureBeat. 24 January 2012 . Retrieved 10 May 2012 . . codebrahma. 10 January 2018 . Retrieved 10 January 2018 . . amazon.com . Retrieved 3 October 2020 . . Training.com . Training.com. 11 September 2016 . Retrieved 23 October 2016 . Staff, CNET News (15 October 1996). . CNET . Retrieved 20 April 2017 . Ryan Dahl (9 November 2010). . Google Groups . Retrieved 5 February 2015 . Garbar, Dzmitry. . belitsoft.com . Retrieved 21 December 2016 . ^ , Sams Publishing, 05-Sep-2012 Ubl, Malte (9 September 2009). . www.jsconf.eu . Retrieved 9 September 2009 . . from the original on 15 December 2021 â via www.youtube.com. ^ , John Wiley & Sons, 01-Oct-2012 . GitHub . Retrieved 27 July 2016 . Ryandahl (23 June 2011). . nodejs.org . Retrieved 17 April 2016 . Dahl, Ryan. . Retrieved 26 October 2013 . Schlueter, Isaac (15 January 2014). . Retrieved 21 January 2014 . Krill, Paul (4 December 2014). . JavaWorld . Retrieved 15 December 2014 . , Tech Watch Ben Noordhuis (12 November 2014). . V8 JavaScript Engine Issues . Retrieved 2 February 2015 . Mikeal, Rogers (28 January 2015). . Retrieved 2 February 2015 . . Archived from on 24 June 2015 . Retrieved 4 July 2015 . . nodejs.org . 14 September 2015 . Retrieved 28 January 2016 . . medium.com . 19 May 2015 . Retrieved 27 June 2015 . , "io.js has merged with the Node.js project again. There won't be any further io.js releases. All of the features in io.js are available in Node.js v4 and above." . Node.js . ^ , O'Reilly Media, Inc., 2013 ^ , Packt Publishing, 10-Nov-2015 , John Wiley & Sons, 14-Aug-2012 , Nodejs Website . Github . . O'Reilly Media, Inc. 15 April 2013. . Retrieved 17 May 2015 . ^ . nodejs.org . Retrieved 19 October 2017 . . nodejs.org . Retrieved 19 October 2017 . Foundation, Node js. . Node.js . Retrieved 19 May 2019 . . infrasoft.com.au . Infrasoft . Retrieved 14 August 2015 . , Azat Mardan, 28-May-2014 , TechRepublic, Tony Patton, 1 July 2014 , WebStorm supports integration with the Node.js runtime environment, WebStorm Help , WebStorm Help . microsoft.com . Retrieved 1 February 2016 . , GitHub , GitHub . definitelytyped.org . Archived from on 3 February 2016. , TypeScript Samples Krill, Paul (10 November 2015). . infoworld.com . . Retrieved 10 November 2015 . , Nodeclipse Website , Channel 9, Microsoft , Visual Studio Code . Node.js . ^ . GitHub . Retrieved 3 May 2018 . , Node.js Website . caustik's blog . 19 August 2012. . strong-pm.io . . GitHub . 12 June 2021. Aleksander Kasiuk (22 April 2015). . . www.postgresql.org . Retrieved 20 October 2016 . , Node.js Website ^ . nodejs.org . Retrieved 26 September 2020 . Foundation, Node.js. . nodejs.org . Retrieved 8 March 2017 . . GitHub . Retrieved 8 March 2017 . Foundation, Node.js. . nodejs.org . Retrieved 8 March 2017 . Whittaker, Zack, , ZDNet, 25 August 2017 Further reading [ ] Hughes-Croucher, Tom; Wilson, Mike (April 2012), Up and Running with Node.js , , Ornbo, George (September 2012), Sams Teach Yourself Node.js in 24 Hours , , Teixeira, Pedro (October 2012), , , and Aaron Newcomb (9 January 2013). . twit.tv/show/floss-weekly (Podcast). .  Event occurs at 1:08:13 . Retrieved 9 January 2013 . Gackenheimer, Cory (October 2013), Node.js Recipes: A Problem-Solution Approach , , External links [ ] Wikimedia Commons has media related to . on Platform Frameworks / MEEN (substituted with ) (uses Express.js) Libraries Languages Concepts Editors ( ) Related Module bundlers frameworks ( ) People : National Retrieved from " " : Hidden categories: This page was last edited on 8 April 2023, at 12:23 (UTC) . Text is available under the ;
additional terms may apply.  By using this site, you agree to the and . WikipediaÂ® is a registered trademark of the , a non-profit organization. Toggle limited content width