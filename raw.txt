[<p>Node.js lets developers use JavaScript to write command line tools and for . The ability to run JavaScript code on the server is often used to generate  content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,<sup class="reference" id="cite_ref-6"></sup> unifying  development around a single programming language, as opposed to using different languages for the server- versus client-side programming.
</p>, <p>Node.js has an  capable of . These design choices aim to optimize  and  in web applications with many input/output operations, as well as for  applications (e.g.,  programs and ).<sup class="reference" id="cite_ref-readwrite_7-0"></sup>
</p>, <p>The Node.js  project was previously governed by the Node.js Foundation,<sup class="reference" id="cite_ref-8"></sup> and has now merged with the  to form the . OpenJS Foundation is facilitated by the 's Collaborative Projects program.<sup class="reference" id="cite_ref-9"></sup>
</p>, <p>Corporate users of Node.js software include ,<sup class="reference" id="cite_ref-10"></sup> ,<sup class="reference" id="cite_ref-11"></sup> ,<sup class="reference" id="cite_ref-12"></sup> ,<sup class="reference" id="cite_ref-vbliipad_13-0"></sup><sup class="reference" id="cite_ref-14"></sup> ,<sup class="reference" id="cite_ref-guardianMS_15-0"></sup><sup class="reference" id="cite_ref-16"></sup> ,<sup class="reference" id="cite_ref-17"></sup> ,<sup class="reference" id="cite_ref-18"></sup><sup class="reference" id="cite_ref-19"></sup> ,<sup class="reference" id="cite_ref-sapappbuilder_20-0"></sup> ,<sup class="reference" id="cite_ref-vbwalmart_21-0"></sup> ,<sup class="reference" id="cite_ref-22"></sup> and .<sup class="reference" id="cite_ref-23"></sup>
</p>, <p>Node.js was written initially by  in 2009,<sup class="reference" id="cite_ref-training.com_24-0"></sup> about thirteen years after the introduction of the first server-side JavaScript environment,  LiveWire Pro Web.<sup class="reference" id="cite_ref-25"></sup> The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by .<sup class="reference" id="cite_ref-Google_Groups_post_by_Ryan_Dahl_about_Joyent_26-0"></sup>
</p>, <p>Dahl criticized the limited possibilities of the most popular web server in 2009, , to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.<sup class="reference" id="cite_ref-27"></sup>
</p>, <p>Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.<sup class="reference" id="cite_ref-b3_28-0"></sup><sup class="reference" id="cite_ref-29"></sup><sup class="reference" id="cite_ref-30"></sup> Node.js combined 's  JavaScript engine, an , and a low-level  .<sup class="reference" id="cite_ref-b1_31-0"></sup>
</p>, <p>In January 2010, a  was introduced for the Node.js environment called .<sup class="reference" id="cite_ref-32"></sup> The package manager makes it easier for programmers to publish and share source code of Node.js packages and is designed to simplify installation, updating, and uninstallation of packages.<sup class="reference" id="cite_ref-b1_31-1"></sup>
</p>, <p>In June 2011, Microsoft and Joyent implemented a native  version of Node.js.<sup class="reference" id="cite_ref-33"></sup> The first Node.js build supporting Windows was released in July 2011.
</p>, <p>In January 2012, Dahl stepped aside, promoting coworker and <i></i> creator Isaac Schlueter to manage the project.<sup class="reference" id="cite_ref-34"></sup> In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.<sup class="reference" id="cite_ref-35"></sup>
</p>, <p>In December 2014, Fedor Indutny started io.js, a  of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an  alternative with a separate technical committee.<sup class="reference" id="cite_ref-Krill,_Paul_36-0"></sup><sup class="reference" id="cite_ref-iwtw_37-0"></sup> Unlike Node.js,<sup class="reference" id="cite_ref-38"></sup> the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.<sup class="reference" id="cite_ref-Mikeal,_Rogers_39-0"></sup>
</p>, <p>In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.<sup class="reference" id="cite_ref-40"></sup>
</p>, <p>In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.<sup class="reference" id="cite_ref-41"></sup> This merge brought V8  features into Node.js and a long-term support release cycle.<sup class="reference" id="cite_ref-42"></sup> As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merge.<sup class="reference" id="cite_ref-43"></sup>
</p>, <p>In 2019, the JS Foundation and Node.js Foundation merged to form the .
</p>, <p>On March 15 2023, Node.js 19.8.1 was released.<sup class="reference" id="cite_ref-44"></sup>
</p>, <p>Node.js allows the creation of  and networking tools using  and a collection of "modules" that handle various core functionalities.<sup class="reference" id="cite_ref-b3_28-1"></sup><sup class="reference" id="cite_ref-b1_31-2"></sup><sup class="reference" id="cite_ref-b2_45-0"></sup><sup class="reference" id="cite_ref-b4_46-0"></sup><sup class="reference" id="cite_ref-b5_47-0"></sup> Modules are provided for  I/O, networking (, , ,  , or ),  data (buffers),  functions, , and other core functions.<sup class="reference" id="cite_ref-b1_31-3"></sup><sup class="reference" id="cite_ref-b4_46-1"></sup><sup class="reference" id="cite_ref-48"></sup> Node.js's modules use an API designed to reduce the complexity of writing server applications.<sup class="reference" id="cite_ref-b1_31-4"></sup><sup class="reference" id="cite_ref-b4_46-2"></sup>
</p>, <p>JavaScript is the only language that Node.js supports natively, but many  languages are available.<sup class="reference" id="cite_ref-49"></sup> As a result, Node.js applications can be written in ,<sup class="reference" id="cite_ref-b6_50-0"></sup> , ,  and others.
</p>, <p>Node.js is primarily used to build network programs such as Web servers.<sup class="reference" id="cite_ref-b2_45-1"></sup> The most significant difference between Node.js and  is that most functions in PHP  until completion (commands execute only after previous commands finish), while Node.js functions are  (commands execute  or even in ,<sup class="reference" id="cite_ref-node_cluster_module_doc_51-0"></sup><sup class="reference" id="cite_ref-52"></sup> and use  to signal completion or failure).<sup class="reference" id="cite_ref-b2_45-2"></sup>
</p>, <p>Node.js is officially supported on , <span class="nowrap"></span> and  8.1 and Server 2012 (and later),<sup class="reference" id="cite_ref-supportedOS_3-1"></sup> with  tier 2 support for  and  and experimental support for .   also works, and LTS versions available for  (AS/400).<sup class="reference" id="cite_ref-53"></sup> The provided source code may also be built on similar operating systems to those officially supported or be modified by third parties to support others such as <sup class="reference" id="cite_ref-bomBora_-_Node.js_for_NonStop_54-0"></sup> and  servers.
</p>, <p>Node.js brings  to , enabling development of fast web servers in JavaScript.<sup class="reference" id="cite_ref-b1_31-5"></sup> Developers can create scalable servers without using , by using a simplified model of  that uses callbacks to signal the completion of a task.<sup class="reference" id="cite_ref-b1_31-6"></sup>  Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.<sup class="reference" id="cite_ref-b1_31-7"></sup>
</p>, <p>Node.js was built on top of 's  since it was open-sourced under the . It is proficient with internet fundamentals such as , , and .<sup class="reference" id="cite_ref-b3_28-2"></sup>  was also a well-known language, making Node.js accessible to the .<sup class="reference" id="cite_ref-b3_28-3"></sup>
</p>, <p>There are thousands of open-source libraries for Node.js, most of them hosted on the  website. There are multiple developer conferences and events that support the Node.js community, including NodeConf, Node Interactive, and Node Summit as well as a number of regional events.
</p>, <p>The open-source community has developed  to accelerate the development of applications. Such frameworks include Connect, , , Feathers.js, Koa.js, Hapi.js, , , Derby, and many others.<sup class="reference" id="cite_ref-b1_31-8"></sup><sup class="reference" id="cite_ref-b7_55-0"></sup> Various packages have also been created for interfacing with other languages or runtime environments such as .<sup class="reference" id="cite_ref-56"></sup>
</p>, <p>Modern desktop  provide editing and debugging features specifically for Node.js applications. Such IDEs include , ,  ,<sup class="reference" id="cite_ref-57"></sup><sup class="reference" id="cite_ref-58"></sup>  (with Node.js Tools for Visual Studio,<sup class="reference" id="cite_ref-59"></sup> or  with Node definitions,<sup class="reference" id="cite_ref-60"></sup><sup class="reference" id="cite_ref-61"></sup><sup class="reference" id="cite_ref-62"></sup><sup class="reference" id="cite_ref-63"></sup>) ,<sup class="reference" id="cite_ref-64"></sup>  Enide Studio<sup class="reference" id="cite_ref-65"></sup> (-based), and .<sup class="reference" id="cite_ref-66"></sup><sup class="reference" id="cite_ref-67"></sup>
Certain online web-based IDEs also support Node.js, such as , , , Koding, and the visual flow editor in .
</p>, <p>Node.js is supported across a number of cloud-hosting platforms like , , ,  and others.
</p>, <p>New major releases of Node.js are cut from the  main branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to  (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release receives only critical fixes and documentation updates.<sup class="reference" id="cite_ref-Release_69-12"></sup> The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.
</p>, <p>Node.js is a JavaScript runtime environment that processes incoming requests in a loop, called the .
</p>, <p>Node.js uses  under the hood to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and -based systems such as Linux, , OSS on , and Unix.
</p>, <p>Node.js operates on a  , using  calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread .<sup class="reference" id="cite_ref-71"></sup> The design of sharing a single thread among all the requests that use the  is intended for building highly concurrent applications, where any function performing I/O must use a . To accommodate the single-threaded event loop, Node.js uses the  library—which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.<sup class="reference" id="cite_ref-readwrite_7-1"></sup>
</p>, <p>A thread pool handles the execution of parallel tasks in Node.js. The main thread function call posts tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback.
</p>, <p>A downside of this single-threaded approach is that Node.js does not allow  by increasing the number of  of the machine it is running on without using an additional module, such as cluster,<sup class="reference" id="cite_ref-node_cluster_module_doc_51-1"></sup> StrongLoop Process Manager,<sup class="reference" id="cite_ref-72"></sup> or pm2.<sup class="reference" id="cite_ref-73"></sup> However, developers can increase the default number of threads in the libuv thread pool. The server  is likely to distribute these threads across multiple cores.<sup class="reference" id="cite_ref-74"></sup> Another problem is that long-lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.<sup class="noprint Inline-Template Template-Fact" style="white-space:nowrap;">[<i></i>]</sup>
</p>, <p>V8 is the JavaScript execution engine which was initially built for . It was then open-sourced by Google in 2008. Written in , V8 compiles JavaScript source code to native machine code .<sup class="reference" id="cite_ref-readwrite_7-2"></sup> As of 2016, it also includes Ignition, a .
</p>, <p> is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the , organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as  to task runners such as .
</p>, <p>Node.js can be combined with a browser with a site, a database that supports JSON data (such as ,<sup class="reference" id="cite_ref-75"></sup> , or ) and  for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as , , , etc., Node.js allows the  of the same model and service interface between client side and server side.
</p>, <p>Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small . Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.<sup class="reference" id="cite_ref-76"></sup> In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead, callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.
</p>, <p>Node.js supports  and as of Node 14 has experimental support of , the WebAssembly System Interface.
</p>, <p>Node.js provides a way to create "add-ons" via a -based API called N-API, which can be used to produce loadable (importable) <code>.node</code> modules from source code written in C/C++.<sup class="reference" id="cite_ref-:1_77-0"></sup> The modules can be directly loaded into memory and executed from within JS environment as simple CommonJS modules. The implementation of the N-API relies on internal C/C++ Node.js and V8 objects requiring users  () Node.js specific  into their native source code.<sup class="reference" id="cite_ref-:1_77-1"></sup>
</p>, <p>As the Node.js API is subject to breaking changes at a binary level, modules have to be built and shipped against specific Node.js versions to work properly. To address the issue, third parties have introduced open-sourced С/С++ wrappers on top of the API that partially alleviate the problem. They simplify interfaces, but as a side effect they may also introduce complexity which maintainers have to deal with. Even though the core functionality of Node.js resides in a JavaScript built-in library, modules written in C++ can be used to enhance capabilities and to improve performance of applications.
</p>, <p>In order to produce such modules one needs to have an appropriate C++ compiler and necessary headers (the latter are typically shipped with Node.js itself), e.g., ,  or .
</p>, <p>The N-API is similar to .
</p>, <p>In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."<sup class="reference" id="cite_ref-78"></sup>
</p>, <p>The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates the administration of these projects to working groups or committees.<sup class="reference" id="cite_ref-79"></sup> The LTS group that manages long term supported releases is one such group. Other current groups include Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.<sup class="reference" id="cite_ref-80"></sup>
</p>, <p>In August 2017, a third of the TSC members resigned due to a dispute related to the project's code of conduct.<sup class="reference" id="cite_ref-81"></sup>
</p>, <p class="mw-empty-elt">
</p>]