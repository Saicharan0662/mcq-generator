[<p class="mw-empty-elt">
</p>, <p> is a , . Its design philosophy emphasizes  with the use of significant indentation via the .<sup class="reference" id="cite_ref-AutoNT-7_33-0"></sup>
</p>, <p>Python is  and . It supports multiple , including  (particularly ),  and . It is often described as a "batteries included" language due to its comprehensive .<sup class="reference" id="cite_ref-About_34-0"></sup><sup class="reference" id="cite_ref-35"></sup>
</p>, <p> began working on Python in the late 1980s as a successor to the  and first released it in 1991 as Python 0.9.0.<sup class="reference" id="cite_ref-36"></sup> Python 2.0 was released in 2000. Python 3.0, released in 2008, was a major revision not completely  with earlier versions. Python 2.7.18, released in 2020, was the last release of Python 2.<sup class="reference" id="cite_ref-37"></sup>
</p>, <p>Python consistently ranks as one of the most popular programming languages.<sup class="reference" id="cite_ref-38"></sup><sup class="reference" id="cite_ref-39"></sup><sup class="reference" id="cite_ref-tiobecurrent_40-0"></sup><sup class="reference" id="cite_ref-41"></sup>
</p>, <p>Python was conceived in the late 1980s<sup class="reference" id="cite_ref-venners-interview-pt-1_42-0"></sup> by  at  (CWI) in the  as a successor to the , which was inspired by ,<sup class="reference" id="cite_ref-AutoNT-12_43-0"></sup> capable of  and interfacing with the  operating system.<sup class="reference" id="cite_ref-faq-created_13-1"></sup> Its implementation began in December 1989.<sup class="reference" id="cite_ref-timeline-of-python_44-0"></sup> Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his "permanent vacation" from his responsibilities as Python's "", a title the Python community bestowed upon him to reflect his long-term commitment as the project's chief decision-maker.<sup class="reference" id="cite_ref-lj-bdfl-resignation_45-0"></sup> In January 2019, active Python core developers elected a five-member Steering Council to lead the project.<sup class="reference" id="cite_ref-46"></sup><sup class="reference" id="cite_ref-47"></sup>
</p>, <p>Python 2.0 was released on 16 October 2000, with many major new features such as ,  garbage collection, , and  support.<sup class="reference" id="cite_ref-newin-2.0_48-0"></sup> Python 3.0, released on 3 December 2008, with many of its major features  to Python 2.6.x<sup class="reference" id="cite_ref-pep-3000_49-0"></sup> and 2.7.x. Releases of Python 3 include the <code>2to3</code> utility, which automates the translation of Python 2 code to Python 3.<sup class="reference" id="cite_ref-50"></sup>
</p>, <p>Python 2.7's  was initially set for 2015, then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3.<sup class="reference" id="cite_ref-51"></sup><sup class="reference" id="cite_ref-52"></sup> No further security patches or other improvements will be released for it.<sup class="reference" id="cite_ref-53"></sup><sup class="reference" id="cite_ref-54"></sup> Currently only 3.7 and later are supported. In 2021, Python 3.9.2 and 3.8.8 were expedited<sup class="reference" id="cite_ref-55"></sup> as all versions of Python (including 2.7<sup class="reference" id="cite_ref-56"></sup>) had security issues leading to possible <sup class="reference" id="cite_ref-57"></sup> and .<sup class="reference" id="cite_ref-58"></sup>
</p>, <p>In 2022, Python 3.10.4 and 3.9.12 were expedited<sup class="reference" id="cite_ref-59"></sup> and 3.8.13, and 3.7.13, because of many security issues.<sup class="reference" id="cite_ref-60"></sup> When Python 3.9.13 was released in May 2022, it was announced that the 3.9 series (joining the older series 3.8 and 3.7) would only receive security fixes in the future.<sup class="reference" id="cite_ref-61"></sup> On September 7, 2022, four new releases were made due to a potential : 3.10.7, 3.9.14, 3.8.14, and 3.7.14.<sup class="reference" id="cite_ref-62"></sup><sup class="reference" id="cite_ref-63"></sup>
</p>, <p>As of November 2022,<sup class="plainlinks noexcerpt noprint asof-tag update" style="display:none;"></sup> Python 3.11 is the stable release. Notable changes from 3.10 include increased program execution speed and improved error reporting.<sup class="reference" id="cite_ref-64"></sup>
</p>, <p>Python is a .  and  are fully supported, and many of their features support functional programming and  (including <sup class="reference" id="cite_ref-AutoNT-13_65-0"></sup> and ).<sup class="reference" id="cite_ref-AutoNT-14_66-0"></sup> Many other paradigms are supported via extensions, including <sup class="reference" id="cite_ref-AutoNT-15_67-0"></sup><sup class="reference" id="cite_ref-AutoNT-16_68-0"></sup> and .<sup class="reference" id="cite_ref-AutoNT-17_69-0"></sup>
</p>, <p>Python uses  and a combination of  and a cycle-detecting garbage collector for .<sup class="reference" id="cite_ref-Reference_counting_70-0"></sup> It uses dynamic  (), which binds method and variable names during program execution.
</p>, <p>Its design offers some support for functional programming in the  tradition. It has <code>filter</code>,<code>map</code>and<code>reduce</code> functions; , , sets, and  expressions.<sup class="reference" id="cite_ref-AutoNT-59_71-0"></sup> The standard library has two modules (<code>itertools</code> and <code>functools</code>) that implement functional tools borrowed from  and .<sup class="reference" id="cite_ref-AutoNT-18_72-0"></sup>
</p>, <p>Its core philosophy is summarized in the document <i>The </i> (<i>PEP 20</i>), which includes  such as:<sup class="reference" id="cite_ref-PEP20_73-0"></sup>
</p>, <p>Rather than building all of its functionality into its core, Python was designed to be highly  via modules. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum's vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with , which espoused the opposite approach.<sup class="reference" id="cite_ref-venners-interview-pt-1_42-1"></sup>
</p>, <p>Python strives for a simpler, less-cluttered syntax and grammar while giving developers a choice in their coding methodology. In contrast to 's "" motto, Python embraces a "there should be one—and preferably only one—obvious way to do it"  philosophy.<sup class="reference" id="cite_ref-PEP20_73-1"></sup> , a  at the  and Python book author, wrote: "To describe something as 'clever' is <i>not</i> considered a compliment in the Python culture."<sup class="reference" id="cite_ref-AutoNT-19_74-0"></sup>
</p>, <p>Python's developers strive to avoid  and reject patches to non-critical parts of the  reference implementation that would offer marginal increases in speed at the cost of clarity.<sup class="reference" id="cite_ref-AutoNT-20_75-0"></sup> When speed is important, a Python programmer can move time-critical functions to extension modules written in languages such as C; or use , a .  is also available, which translates a Python script into C and makes direct C-level API calls into the Python interpreter.
</p>, <p>Python's developers aim for it to be fun to use. This is reflected in its name—a tribute to the British comedy group <sup class="reference" id="cite_ref-whyname_76-0"></sup>—and in occasionally playful approaches to tutorials and reference materials, such as the use of the terms "spam" and "eggs" (a reference to ) in examples, instead of the often-used .<sup class="reference" id="cite_ref-77"></sup><sup class="reference" id="cite_ref-78"></sup>
</p>, <p>A common  in the Python community is <i>pythonic</i>, which has a wide range of meanings related to program style. "Pythonic" code may use Python idioms well, be natural or show fluency in the language, or conform with Python's minimalist philosophy and emphasis on readability. Code that is difficult to understand or reads like a rough transcription from another programming language is called <i>unpythonic</i>.<sup class="reference" id="cite_ref-79"></sup><sup class="reference" id="cite_ref-80"></sup>
</p>, <p>Python is meant to be an easily readable language. Its formatting is visually uncluttered and often uses English keywords where other languages use punctuation. Unlike many other languages, it does not use  to delimit blocks, and semicolons after statements are allowed but rarely used. It has fewer syntactic exceptions and special cases than  or .<sup class="reference" id="cite_ref-AutoNT-52_81-0"></sup>
</p>, <p>Python uses  indentation, rather than  or keywords, to delimit . An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.<sup class="reference" id="cite_ref-AutoNT-53_82-0"></sup> Thus, the program's visual structure accurately represents its semantic structure.<sup class="reference" id="cite_ref-guttag_83-0"></sup> This feature is sometimes termed the . Some other languages use indentation this way; but in most, indentation has no semantic meaning. The recommended indent size is four spaces.<sup class="reference" id="cite_ref-84"></sup>
</p>, <p>Python's  include:
</p>, <p>The assignment statement (<code>=</code>) binds a name as a  to a separate, dynamically allocated . Variables may subsequently be rebound at any time to any object. In Python, a variable name is a generic reference holder without a fixed ; however, it always refers to <i>some</i> object with a type. This is called —in contrast to  languages, where each variable may contain only a value of a certain type.
</p>, <p>Python does not support  optimization or , and, according to Van Rossum, it never will.<sup class="reference" id="cite_ref-AutoNT-55_87-0"></sup><sup class="reference" id="cite_ref-AutoNT-56_88-0"></sup> However, better support for -like functionality is provided by extending Python's .<sup class="reference" id="cite_ref-AutoNT-57_89-0"></sup> Before 2.5, generators were  ; data was passed unidirectionally out of the generator. From Python 2.5 on, it is possible to pass data back into a generator function; and from version 3.3, it can be passed through multiple stack levels.<sup class="reference" id="cite_ref-AutoNT-58_90-0"></sup>
</p>, <p>Python's  include:
</p>, <p>In Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as , , or . This leads to duplicating some functionality. For example:
</p>, <p>Statements cannot be a part of an expression—so list and other comprehensions or , all being expressions, cannot contain statements. A particular case is that an assignment statement such as <code class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr" id="" style=""><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span></code> cannot form part of the conditional expression of a conditional statement. This has the advantage of avoiding a classic C error of mistaking an assignment operator <code>=</code> for an equality operator <code>==</code> in conditions: <code class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr" id="" style=""><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">c</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">...</span><span class="w"></span></code>} is syntactically valid (but probably unintended) C code, but <code class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr" id="" style=""><span class="k">if</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">1</span><span class="p">:</span> <span class="o">...</span></code> causes a syntax error in Python.
</p>, <p> on objects are  attached to the object's class; the syntax <code class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr" id="" style=""><span class="n">instance</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="n">argument</span><span class="p">)</span></code> is, for normal methods and functions,  for <code class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr" id="" style=""><span class="n">Class</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span> <span class="n">argument</span><span class="p">)</span></code>. Python methods have an explicit <code></code> parameter to access , in contrast to the implicit self (or <code>this</code>) in some other object-oriented programming languages (e.g., , Java, , ).<sup class="reference" id="cite_ref-AutoNT-61_99-0"></sup> Python also provides methods, often called <i>dunder methods</i> (due to their names beginning and ending with double-underscores), to allow user-defined classes to modify how they are handled by native operations including length, comparison, in  and type conversion.<sup class="reference" id="cite_ref-100"></sup>
</p>, <p>Python uses  and has typed objects but untyped variable names. Type constraints are not checked at ; rather, operations on an object may fail, signifying that it is not of a suitable type. Despite being , Python is , forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them.
</p>, <p>Python allows programmers to define their own types using , most often used for . New  of classes are constructed by calling the class (for example, <code class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr" id="" style=""><span class="n">SpamClass</span><span class="p">()</span></code> or <code class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr" id="" style=""><span class="n">EggsClass</span><span class="p">()</span></code>), and the classes are instances of the  <code>type</code> (itself an instance of itself), allowing metaprogramming and .
</p>, <p>Before version 3.0, Python had two kinds of classes (both using the same syntax): <i>old-style</i> and <i>new-style</i>,<sup class="reference" id="cite_ref-classy_101-0"></sup> current Python versions only support the semantics new style.
</p>, <p>Python supports .<sup class="reference" id="cite_ref-102"></sup> Python's syntax allows specifying static types, but they are not checked in the default implementation, . An experimental optional static type-checker, <i>mypy</i>, supports compile-time type checking.<sup class="reference" id="cite_ref-103"></sup>
</p>, <p><code class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr" id="" style=""><span class="mf">1.33333</span></code>
</p>, <p>Python has the usual symbols for arithmetic operators (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>), the floor division operator <code>//</code> and the  <code>%</code> (where the remainder can be negative,  e.g. <code>4 % -3 == -2</code>). It also has <code>**</code> for , e.g. <code>5**3 == 125</code> and <code>9**0.5 == 3.0</code>, and a matrix‑multiplication operator <code>@</code> .<sup class="reference" id="cite_ref-107"></sup> These operators work like in traditional math; with the same , the operators  (<code>+</code> and <code>-</code> can also be  to represent positive and negative numbers respectively).
</p>, <p>The division between integers produces floating-point results. The behavior of division has changed significantly over time:<sup class="reference" id="cite_ref-pep0238_108-0"></sup>
</p>, <p>In Python terms, <code>/</code> is <i>true division</i> (or simply <i>division</i>), and <code>//</code> is <i>floor division.</i> <code>/</code> before version 3.0 is <i>classic division</i>.<sup class="reference" id="cite_ref-pep0238_108-1"></sup>
</p>, <p>Rounding towards negative infinity, though different from most languages, adds consistency. For instance, it means that the equation <code class="nowrap mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr" id="" style=""><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span><span class="o">//</span><span class="n">b</span> <span class="o">==</span> <span class="n">a</span><span class="o">//</span><span class="n">b</span> <span class="o">+</span> <span class="mi">1</span></code> is always true. It also means that the equation <code class="nowrap mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr" id="" style=""><span class="n">b</span><span class="o">*</span><span class="p">(</span><span class="n">a</span><span class="o">//</span><span class="n">b</span><span class="p">)</span> <span class="o">+</span> <span class="n">a</span><span class="o">%</span><span class="n">b</span> <span class="o">==</span> <span class="n">a</span></code> is valid for both positive and negative values of <code>a</code>. However, maintaining the validity of this equation means that while the result of <code>a%b</code> is, as expected, in the  [0, <i>b</i>), where <code>b</code> is a positive integer, it has to lie in the interval (<i>b</i>, 0] when <code>b</code> is negative.<sup class="reference" id="cite_ref-AutoNT-62_109-0"></sup>
</p>, <p>Python provides a <code>round</code> function for  a float to the nearest integer. For , Python 3 uses : <code>round(1.5)</code> and <code>round(2.5)</code> both produce <code>2</code>.<sup class="reference" id="cite_ref-AutoNT-64_110-0"></sup> Versions before 3 used : <code>round(0.5)</code> is <code>1.0</code>, <code>round(-0.5)</code> is <code>−1.0</code>.<sup class="reference" id="cite_ref-AutoNT-63_111-0"></sup>
</p>, <p>Python allows boolean expressions with multiple equality relations in a manner that is consistent with general use in mathematics. For example, the expression <code>a &lt; b &lt; c</code> tests whether <code>a</code> is less than <code>b</code> and <code>b</code> is less than <code>c</code>.<sup class="reference" id="cite_ref-AutoNT-65_112-0"></sup> C-derived languages interpret this expression differently: in C, the expression would first evaluate <code>a &lt; b</code>, resulting in 0 or 1, and that result would then be compared with <code>c</code>.<sup class="reference" id="cite_ref-CPL_113-0"></sup>
</p>, <p>Python uses  for all integer operations. The <code>Decimal</code> type/class in the <code>decimal</code> module provides  to a pre-defined arbitrary precision and several rounding modes.<sup class="reference" id="cite_ref-114"></sup> The <code>Fraction</code> class in the <code>fractions</code> module provides arbitrary precision for .<sup class="reference" id="cite_ref-115"></sup>
</p>, <p>Due to Python's extensive mathematics library, and the third-party library  that further extends the native capabilities, it is frequently used as a scientific scripting language to aid in problems such as numerical data processing and manipulation.<sup class="reference" id="cite_ref-116"></sup><sup class="reference" id="cite_ref-117"></sup>
</p>, <p> program:
</p>, <p>Program to calculate the  of a positive integer:
</p>, <p>Python's large standard library<sup class="reference" id="cite_ref-AutoNT-86_118-0"></sup> provides tools suited to many tasks and is commonly cited as one of its greatest strengths. For Internet-facing applications, many standard formats and protocols such as  and  are supported. It includes modules for creating , connecting to , , arithmetic with arbitrary-precision decimals,<sup class="reference" id="cite_ref-AutoNT-88_119-0"></sup> manipulating , and .
</p>, <p>Some parts of the standard library are covered by specifications—for example, the  (WSGI) implementation <code>wsgiref</code> follows PEP 333<sup class="reference" id="cite_ref-AutoNT-89_120-0"></sup>—but most are specified by their code, internal documentation, and . However, because most of the standard library is cross-platform Python code, only a few modules need altering or rewriting for variant implementations.
</p>, <p>As of 14 November 2022,<sup class="plainlinks noexcerpt noprint asof-tag update" style="display:none;"></sup> the  (PyPI), the official repository for third-party Python software, contains over 415,000<sup class="reference" id="cite_ref-Modulecounts_2022_121-0"></sup> packages with a wide range of functionality, including:
</p>, <p>Most Python implementations (including CPython) include a  (REPL), permitting them to function as a  for which users enter statements sequentially and receive results immediately.
</p>, <p>Python also comes with an  called , which is more beginner-oriented.
</p>, <p>Other shells, including  and , add further abilities such as improved auto-completion, session state retention, and .
</p>, <p>As well as standard desktop , there are -based IDEs, including , for developing science- and math-related programs; , a browser-based IDE and hosting environment; and Canopy IDE, a commercial IDE emphasizing .<sup class="reference" id="cite_ref-122"></sup>
</p>, <p> is the  of Python. It is written in C, meeting the  standard (Python 3.11 uses <sup class="reference" id="cite_ref-123"></sup>) with several select  features. CPython includes its own C extensions, but third-party extensions are not limited to older C versions—e.g. they can be implemented with  or C++.<sup class="reference" id="cite_ref-124"></sup><sup class="reference" id="cite_ref-AutoNT-66_125-0"></sup>) It  Python programs into an intermediate <sup class="reference" id="cite_ref-AutoNT-67_126-0"></sup> which is then executed by its .<sup class="reference" id="cite_ref-AutoNT-68_127-0"></sup> CPython is distributed with a large standard library written in a mixture of C and native Python, and is available for many platforms, including Windows (starting with Python 3.9, the Python installer deliberately fails to install on  and 8;<sup class="reference" id="cite_ref-128"></sup><sup class="reference" id="cite_ref-129"></sup>  was supported until Python 3.5) and most modern  systems, including macOS (and  Macs, since Python 3.9.1, with experimental installer) and unofficial support for e.g. .<sup class="reference" id="cite_ref-130"></sup> Platform portability was one of its earliest priorities.<sup class="reference" id="cite_ref-AutoNT-69_131-0"></sup> (During Python 1 and 2 development, even  and  were supported,<sup class="reference" id="cite_ref-132"></sup> but support has since been dropped for many platforms.)
</p>, <p>Other just-in-time Python compilers have been developed, but are now unsupported:
</p>, <p>There are several compilers to high-level object languages, with either unrestricted Python, a restricted subset of Python, or a language similar to Python as the source language:
</p>, <p>Specialized:
</p>, <p>Older projects (or not to be used with Python 3.x and latest syntax):
</p>, <p>Performance comparison of various Python implementations on a non-numerical (combinatorial) workload was presented at EuroSciPy '13.<sup class="reference" id="cite_ref-156"></sup> Python's performance compared to other programming languages is also benchmarked by .<sup class="reference" id="cite_ref-157"></sup>
</p>, <p>Python's development is conducted largely through the <i>Python Enhancement Proposal</i> (PEP) process, the primary mechanism for proposing major new features, collecting community input on issues, and documenting Python design decisions.<sup class="reference" id="cite_ref-PepCite000_158-0"></sup> Python coding style is covered in PEP 8.<sup class="reference" id="cite_ref-159"></sup> Outstanding PEPs are reviewed and commented on by the Python community and the steering council.<sup class="reference" id="cite_ref-PepCite000_158-1"></sup>
</p>, <p>Enhancement of the language corresponds with the development of the CPython reference implementation. The mailing list python-dev is the primary forum for the language's development. Specific issues were originally discussed in the   hosted at by the foundation.<sup class="reference" id="cite_ref-AutoNT-21_160-0"></sup> In 2022, all issues and discussions were migrated to .<sup class="reference" id="cite_ref-161"></sup> Development originally took place on a  source-code repository running , until Python moved to  in January 2017.<sup class="reference" id="cite_ref-py_dev_guide_162-0"></sup>
</p>, <p>CPython's public releases come in three types, distinguished by which part of the version number is incremented:
</p>, <p>Many  are also released as previews and for testing before final releases. Although there is a rough schedule for each release, they are often delayed if the code is not ready. Python's development team monitors the state of the code by running the large  suite during development.<sup class="reference" id="cite_ref-AutoNT-23_168-0"></sup>
</p>, <p>The major  on Python is . There are also special Python mentoring programs, such as .
</p>, <p>Python 3.10 deprecated <code>wstr</code> (to be removed in Python 3.12; meaning Python extensions<sup class="reference" id="cite_ref-169"></sup> need to be modified by then),<sup class="reference" id="cite_ref-170"></sup> and added  to the language.<sup class="reference" id="cite_ref-171"></sup>
</p>, <p>Tools that can generate documentation for Python API include  (available as part of the standard library), ,  and its forks,  and , among others.<sup class="reference" id="cite_ref-172"></sup>
</p>, <p>Python's name is derived from the British comedy group , whom Python creator Guido van Rossum enjoyed while developing the language. Monty Python references appear frequently in Python code and culture;<sup class="reference" id="cite_ref-tutorial-chapter1_173-0"></sup> for example, the  often used in Python literature are  instead of the traditional .<sup class="reference" id="cite_ref-tutorial-chapter1_173-1"></sup><sup class="reference" id="cite_ref-AutoNT-26_174-0"></sup> The official Python documentation also contains various references to Monty Python routines.<sup class="reference" id="cite_ref-175"></sup><sup class="reference" id="cite_ref-176"></sup>
</p>, <p>The prefix <i>Py-</i> is used to show that something is related to Python. Examples of the use of this prefix in names of Python applications or libraries include , a  of  to Python (commonly used to create games);  and , which bind  and GTK to Python respectively; and , a Python implementation originally written in Python.
</p>, <p>Since 2003, Python has consistently ranked in the top ten most popular programming languages in the  where as of December 2022<sup class="plainlinks noexcerpt noprint asof-tag update" style="display:none;"></sup> it was the most popular language (ahead of C, C++, and ).<sup class="reference" id="cite_ref-tiobecurrent_40-1"></sup> It was selected Programming Language of the Year (for "the highest rise in ratings in a year") in 2007, 2010, 2018, and 2020 (the only language to have done so four times as of 2020<sup class="reference" id="cite_ref-177"></sup>).
</p>, <p>An empirical study found that scripting languages, such as Python, are more productive than conventional languages, such as C and Java, for programming problems involving string manipulation and search in a dictionary, and determined that memory consumption was often "better than Java and not much worse than C or C++".<sup class="reference" id="cite_ref-AutoNT-28_178-0"></sup>
</p>, <p>Large organizations that use Python include , ,<sup class="reference" id="cite_ref-quotes-about-python_179-0"></sup> ,<sup class="reference" id="cite_ref-AutoNT-29_180-0"></sup> ,<sup class="reference" id="cite_ref-AutoNT-30_181-0"></sup> ,<sup class="reference" id="cite_ref-AutoNT-31_182-0"></sup> ,<sup class="reference" id="cite_ref-183"></sup> , ,<sup class="reference" id="cite_ref-184"></sup> ,<sup class="reference" id="cite_ref-185"></sup> and some smaller entities like <sup class="reference" id="cite_ref-AutoNT-32_186-0"></sup> and .<sup class="reference" id="cite_ref-AutoNT-33_187-0"></sup> The social news networking site  was written mostly in Python.<sup class="reference" id="cite_ref-188"></sup>
</p>, <p>Python can serve as a  for , e.g., via  for the .<sup class="reference" id="cite_ref-AutoNT-35_189-0"></sup> With , a standard API has evolved to facilitate these applications.  like , , , , , , , Bottle, and  support developers in the design and maintenance of complex applications. Pyjs and  can be used to develop the client-side of Ajax-based applications.  can be used as a  to a relational database.  is a framework to program communications between computers, and is used (for example) by .
</p>, <p>Libraries such as , , and  allow the effective use of Python in scientific computing,<sup class="reference" id="cite_ref-cise_190-0"></sup><sup class="reference" id="cite_ref-millman_191-0"></sup> with specialized libraries such as  and  providing domain-specific functionality.  is a  with a  programmable in Python: its library covers many aspects of , including , , , , and .<sup class="reference" id="cite_ref-ICSE_192-0"></sup>  has Python bindings with a rich set of features for  and .<sup class="reference" id="cite_ref-193"></sup>
</p>, <p>Python is commonly used in  projects and machine learning projects with the help of libraries like , , , and .<sup class="reference" id="cite_ref-whitepaper2015_194-0"></sup><sup class="reference" id="cite_ref-195"></sup><sup class="reference" id="cite_ref-196"></sup><sup class="reference" id="cite_ref-197"></sup> As a scripting language with a , simple syntax, and rich text processing tools, Python is often used for .<sup class="reference" id="cite_ref-AutoNT-47_198-0"></sup>
</p>, <p>Python can also be used to create games, with libraries such as , which can make 2D games.
</p>, <p>Python has been successfully embedded in many software products as a scripting language, including in  software such as , 3D parametric modelers like , 3D animation packages such as , , , , , , , , , the visual effects compositor , 2D imaging programs like ,<sup class="reference" id="cite_ref-199"></sup> ,  and ,<sup class="reference" id="cite_ref-AutoNT-38_200-0"></sup> and  programs like  and .  uses Python as a  to show complex structures such as C++ containers.  promotes Python as the best choice for writing scripts in .<sup class="reference" id="cite_ref-AutoNT-39_201-0"></sup> It has also been used in several video games,<sup class="reference" id="cite_ref-AutoNT-40_202-0"></sup><sup class="reference" id="cite_ref-AutoNT-41_203-0"></sup> and has been adopted as first of the three available  in , the other two being  and .<sup class="reference" id="cite_ref-AutoNT-42_204-0"></sup>
</p>, <p>Many operating systems include Python as a standard component. It ships with most ,<sup class="reference" id="cite_ref-205"></sup>  (using Python 2.7),  (as a package), , and  (as a package) and can be used from the command line (terminal). Many Linux distributions use installers written in Python:  uses the  installer, while  and  use the  installer.  uses Python in its , .
</p>, <p>Python is used extensively in the  industry, including in exploit development.<sup class="reference" id="cite_ref-AutoNT-49_206-0"></sup><sup class="reference" id="cite_ref-AutoNT-50_207-0"></sup>
</p>, <p>Most of the  software for the  XO, developed at  since 2008, is written in Python.<sup class="reference" id="cite_ref-AutoNT-51_208-0"></sup> The   project has adopted Python as its main user-programming language.
</p>, <p> includes Python and intends to replace Java with Python. Its Python Scripting Provider is a core feature<sup class="reference" id="cite_ref-209"></sup> since Version 4.0 from 7 February 2013.
</p>, <p>Python's design and philosophy have influenced many other programming languages:
</p>, <p>Python's development practices have also been emulated by other languages. For example, the practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (in Python, a PEP) is also used in ,<sup class="reference" id="cite_ref-AutoNT-99_219-0"></sup> ,<sup class="reference" id="cite_ref-AutoNT-100_220-0"></sup> and Swift.<sup class="reference" id="cite_ref-221"></sup>
</p>]